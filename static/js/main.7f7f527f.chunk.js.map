{"version":3,"sources":["App.module.css","react-planning/Components/DefaultElement/DefaultDetailedElement/DefaultDetailedElement.module.css","react-planning/Components/GroupItemsGrid/GroupItemsGrid.module.css","react-planning/Components/DropZone/DropZone.module.css","react-planning/Components/DaysGrid/DaysGrid.module.css","react-planning/Components/ElementWrapper/ElementWrapper.module.css","react-planning/Components/MonthSelector/MonthSelector.module.css","react-planning/Components/DragPreview/DragPreview.module.css","react-planning/Components/ResizeHandle/ResizeHandle.module.css","react-planning/Components/DefaultElement/DefaultBasicElement/DefaultBasicElement.module.css","react-planning/Components/ItemsGrid/ItemsGrid.module.css","react-planning/Planner/Planner.module.css","assets/images/logo1.png","assets/images/logo2.png","assets/images/logo3.png","assets/images/logo4.png","assets/images/logo5.png","assets/images/logo6.png","assets/images/logo7.png","react-planning/Helpers/Functions.js","react-planning/Constants/Constants.js","react-planning/Components/MonthSelector/MonthSelector.jsx","react-planning/Components/DropZone/DropZone.jsx","react-planning/Components/DaysGrid/DaysGrid.jsx","react-planning/Components/DefaultElement/DefaultDetailedElement/DefaultDetailedElement.jsx","react-planning/Components/DragPreview/DragPreview.jsx","react-planning/Components/ResizeHandle/ResizeHandle.jsx","react-planning/Components/ElementWrapper/ElementWrapper.jsx","react-planning/Components/DefaultElement/DefaultBasicElement/DefaultBasicElement.jsx","react-planning/Components/ItemsGrid/ItemsGrid.jsx","react-planning/Components/GroupItemsGrid/GroupItemsGrid.jsx","react-planning/Components/LayoutGrid/LayoutGrid.jsx","react-planning/Planner/Planner.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","getDaysInMonth","month","year","Date","getDate","dayDiff","d1","d2","Math","round","abs","getTime","rgbaFromArray","arr","alpha","length","join","MONTHS","DAYS","COLORS","MonthSelector","props","currentMonthStr","monthList","currentMonth","currentYear","previousMonthButton","className","classes","Button","style","color","onClick","previousMonthHandler","nextMonthbutton","nextMonthHandler","scroll","margin","defaultProps","DropZone","useDrop","accept","drop","item","updatedItem","resizing","moving","initItem","onDrop","hover","monitor","hovered","resizeItem","moveItem","setHovered","collect","isOver","useState","useEffect","endDate","dropDate","startDate","diff","setTime","dayOfWeek","getDay","isWeekEnd","overClass","DropZoneOver","weekendClass","includeWeekend","WeekendStyle","dropActivated","ref","Day","substr","DaysGrid","width","offset","rest","daysDropGrid","days","helpers","effectiveWidth","i","border","push","key","borderSytle","borderLeftStyle","grouped","index","left","MonthWrapper","Month","DropZones","defaultColors","outerElement","innerElement","DefaultDetailedElement","background","bgColor","boxShadow","shadowed","ItemFlex","ImagesWrapper","Images","src","content","logo","alt","draggable","onMouseDown","event","preventDefault","Content","Line1","line1","Line2","line2","id","description","type","randomColor","getItemStyles","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragPreview","useDragLayer","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","ItemStyle","ImageSytle","renderItem","ResizeHandle","useDrag","orientation","resize","innerStyle","right","backgroundColor","styles","shared","position","top","height","first","second","ElementWrapper","drag","hoverStyle","borderStyle","hoverStyleActive","setHoverStyleActive","cursor","move","customElementType","showOccurences","occurences","ElementOccurences","overlay","Overlay","onMouseOver","onMouseLeave","RemoveButton","remove","elementType","DefaultBasicElement","ItemsGrid","gridItems","setGridItems","gridTemplateColumns","columnTemplate","forEach","getGridTemplateColumns","gridColors","newGridItems","items","map","monthStart","getMonth","yearStart","getFullYear","colorIndex","searchItemId","find","itemId","console","log","gridColumn","elementClassName","customInnerElementType","marginLeft","onRemove","GroupItemsGrid","groupedItems","setGroupItems","elementHovered","setElementHovered","groupedItemsTmp","groupId","Object","keys","borderBottom","Fragment","Groups","CustomItem","Items","leftWidth","marginTop","GroupViewGrid","SpacerLeft","SpacerRight","LayoutGrid","daysGridElements","inLineStyle","groupedStyle","Planner","PlannerRef","useRef","setItems","PlannerWidth","setPlannerWidth","setMonthList","setCurrentMonth","verifiedItems","tmpItem","sort","a","b","tmpMonths","options","nbreMonth","months","updateScreenSizeHandler","window","addEventListener","removeEventListener","PlannerElement","current","getBoundingClientRect","borderSize","propagatedProps","itemID","newItems","found","findIndex","splice","callBacks","propagate","existingId","max","apply","onAdd","onUpdate","overflowX","toISOString","setMonth","PlannerDefault","Option","marginRight","fontSize","children","Switch","checked","onChange","Slider","Round","App","scrollEnabled","setScrollEnabled","groupedEnabled","setGroupedEnabled","setShowOccurences","logo1","logo2","logo3","logo4","logo5","logo6","logo7","fixedItems","setFixedItems","setOccurences","itemsOccurences","backend","MouseBackEnd","Options","Elements","Timeline","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f7f527f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"App_Content__ZaMNr\",\"Elements\":\"App_Elements__fmpcd\",\"Timeline\":\"App_Timeline__3mVrs\",\"Switch\":\"App_Switch__3kBoA\",\"Slider\":\"App_Slider__15T2R\",\"Round\":\"App_Round__R_A5H\",\"Options\":\"App_Options__3b1fw\",\"Option\":\"App_Option__LaFRR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DefaultDetailedElement\":\"DefaultDetailedElement_DefaultDetailedElement__1V0-c\",\"ItemFlex\":\"DefaultDetailedElement_ItemFlex__1rPhV\",\"Content\":\"DefaultDetailedElement_Content__3uCSu\",\"Line1\":\"DefaultDetailedElement_Line1__1nSWm\",\"Line2\":\"DefaultDetailedElement_Line2__2mvUB\",\"ImagesWrapper\":\"DefaultDetailedElement_ImagesWrapper__x4yNN\",\"Images\":\"DefaultDetailedElement_Images__ZJtUN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GroupViewGrid\":\"GroupItemsGrid_GroupViewGrid__3FsQm\",\"SpacerLeft\":\"GroupItemsGrid_SpacerLeft__36had\",\"SpacerRight\":\"GroupItemsGrid_SpacerRight__1vchy\",\"Groups\":\"GroupItemsGrid_Groups__1vwVr\",\"Items\":\"GroupItemsGrid_Items__NgMxq\",\"CustomItem\":\"GroupItemsGrid_CustomItem__2WG5V\",\"Shadowed\":\"GroupItemsGrid_Shadowed__3rZlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropZone\":\"DropZone_DropZone__2s4Wl\",\"DropZoneOver\":\"DropZone_DropZoneOver__3EXCR\",\"Day\":\"DropZone_Day__1qXhK\",\"WeekendStyle\":\"DropZone_WeekendStyle__Y1XuY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DaysGrid\":\"DaysGrid_DaysGrid__4XRd_\",\"DropZones\":\"DaysGrid_DropZones__Wzy6s\",\"MonthWrapper\":\"DaysGrid_MonthWrapper__3zPa-\",\"Month\":\"DaysGrid_Month__1fD2E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ElementWrapper\":\"ElementWrapper_ElementWrapper__9x_0b\",\"ElementOccurences\":\"ElementWrapper_ElementOccurences__2XeAh\",\"Overlay\":\"ElementWrapper_Overlay__3bzJw\",\"RemoveButton\":\"ElementWrapper_RemoveButton__X7ZSA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MonthSelector\":\"MonthSelector_MonthSelector__3sY2k\",\"Button\":\"MonthSelector_Button__2J3Yp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DragPreview\":\"DragPreview_DragPreview__33G3v\",\"ItemStyle\":\"DragPreview_ItemStyle__2mXbq\",\"ImageSytle\":\"DragPreview_ImageSytle__33Xd4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResizeHandle\":\"ResizeHandle_ResizeHandle__TTbS9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DefaultBasicElement\":\"DefaultBasicElement_DefaultBasicElement__1DLOn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ItemsGrid\":\"ItemsGrid_ItemsGrid__3gVWX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlannerDefault\":\"Planner_PlannerDefault__s3zFP\"};","module.exports = __webpack_public_path__ + \"static/media/logo1.c2891fdd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo2.8d314fc0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo3.7cae2123.png\";","module.exports = __webpack_public_path__ + \"static/media/logo4.f2ce6af0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo5.fb95f4c3.png\";","module.exports = __webpack_public_path__ + \"static/media/logo6.e5e58d31.png\";","module.exports = __webpack_public_path__ + \"static/media/logo7.6acd8367.png\";","\nexport const day = 1000 * 60 * 60 * 24;\n\nexport const getDaysInMonth = ( month, year ) => {\n   return new Date(year, month, 0).getDate();\n}\n\nexport const monthDiff = (d1, d2) => {\n    let months;\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return months <= 0 ? 0 : months + 1;\n}\n\nexport const dayDiff = (d1, d2) => {\n    return Math.round(Math.abs(( new Date(d1).getTime() - new Date(d2).getTime() ) / day ));\n}\n\nexport const timeDiff = (d1, d2) => {\n    return new Date(d1).getTime() - new Date(d2).getTime();\n}\n\nexport const randomRGBAColor = ( alpha, min, max ) => {\n    const minByte = min ? min : 0;\n    const maxByte = max ? max : 255;\n    const randomNumber = () => Math.floor(Math.random() * (maxByte - minByte + 1) + minByte);\n    return `rgba(${[randomNumber(), randomNumber(), randomNumber(), alpha].join(',')})`\n}\n\nexport const rgbaFromArray = (arr, alpha) => {\n    if ( !arr || arr.length !== 3 ) return null;\n    return `rgba(${arr.join(',')}, ${alpha ? alpha : 1})`;\n}\n","export const ELEMENT = 'ELEMENT';\nexport const MONTHS = [ \n    \"\" \n    ,\"January\"\n    ,\"February\"\n    ,\"March\"\n    ,\"April\"\n    ,\"May\"\n    ,\"June\"\n    ,\"July\"\n    ,\"August\"\n    ,\"September\"\n    ,\"October\"\n    ,\"November\"\n    ,\"December\" \n];\nexport const DAYS = [\n    \"Sunday\"\n    ,\"Monday\"\n    ,\"Tuesday\"\n    ,\"Wednesday\"\n    ,\"Thursday\"\n    ,\"Friday\"\n    ,\"Saturday\"];\nexport const COLORS = [\n    [252, 226, 194]   // Bisque\n    , [179, 200, 200] // Pastel Blue\n    , [108, 178, 209] // Iceberg\n    , [79, 158, 196]  // Celestial Blue \n    , [193, 231, 227] // Columbia Blue\n    , [220, 255, 251] // Light Cyan\n    , [255, 220, 244] // Pink Lace\n    , [218, 191, 222] // Thistle\n    , [193, 187, 221] // Lavender Gray\n]","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MONTHS } from '../../Constants/Constants';\nimport classes from './MonthSelector.module.css';\n\nconst MonthSelector = props => {\n\n    const currentMonthStr = props.monthList[props.currentMonth] ? MONTHS[props.monthList[props.currentMonth].month] : '';\n    const currentYear = props.monthList[props.currentMonth] ? props.monthList[props.currentMonth].year : '';\n\n    const previousMonthButton = (\n        <p \n            className={classes.Button}\n            style={{color: props.currentMonth === 0 ? '#ccc' : 'black'}} \n            onClick={props.previousMonthHandler}\n        >\n            &#60;\n        </p>\n    )\n\n    const nextMonthbutton = (\n        <p \n            className={classes.Button}\n            style={{color: props.currentMonth === props.monthList.length -1 ? '#ccc' : 'black'}} \n            onClick={props.nextMonthHandler}\n        >\n            &#62;\n        </p>\n    )\n\n    return (\n        <div className={classes.MonthSelector}>\n            {\n                !props.scroll\n                    ?   previousMonthButton\n                    :   null   \n            }\n\n            <p style={{margin: 0}}>{`${currentMonthStr} - ${currentYear}`}</p>\n            \n            {\n                !props.scroll\n                    ?   nextMonthbutton\n                    :   null\n            }\n\n        </div>\n    );\n}\n\nMonthSelector.defaultProps = {\n    monthList : []\n}\n\nMonthSelector.propTypes = {\n    monthList : PropTypes.array.isRequired,\n    currentMonth : PropTypes.number.isRequired,\n    previousMonthHandler : PropTypes.func.isRequired,\n    nextMonthHandler : PropTypes.func.isRequired,\n    scroll: PropTypes.bool,\n}\n\nexport default MonthSelector;","import React, { useState, useEffect } from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\n\nimport { ELEMENT, DAYS } from '../../Constants/Constants';\nimport { timeDiff, day } from '../../Helpers/Functions';\nimport classes from './DropZone.module.css';\n\nconst DropZone = props => {\n\n    const [{ isOver }, drop] = useDrop({\n        accept: ELEMENT,\n        drop: item => {\n            let updatedItem = item;\n            if ( !item.resizing && !item.moving )\n            {\n                updatedItem = initItem( item );\n            }\n            \n            props.onDrop( updatedItem, true );\n        },\n        hover: ( item, monitor ) => {\n            if ( !hovered && ( item.resizing || item.moving ) ) {\n                let updatedItem = item;\n                if ( item.resizing )\n                {\n                    updatedItem = resizeItem( item );\n                }\n                else if ( item.moving ){\n                    updatedItem = moveItem( item );\n                }\n                \n                props.onDrop( updatedItem );\n                setHovered( true );\n            }\n        },\n\t\tcollect: monitor => ({\n\t\t\tisOver: !!monitor.isOver(),\n\t\t}),\n    });\n\n    const[hovered, setHovered] = useState( false );\n\n\n    useEffect(() => {\n        setHovered( false );\n    }, [isOver]);\n\n\n    // Resize the item on over\n    const resizeItem = item => {\n\n        if (item.resizing === 'right')\n        {\n            item.endDate = props.dropDate;\n            return item;\n        }\n        if (item.resizing === 'left')\n        {\n            item.startDate = props.dropDate;\n            return item;\n        }\n        return null // If the value of resizing is not left or right\n    }\n\n    // Update the item on drop and propagate to host element\n    const moveItem = item => {\n        \n        // Get the time difference between  previously set startDate and the new one\n        let diff = item.startDate ? timeDiff( props.dropDate, item.startDate ) : 0;\n\n        // Set the updated date\n        item.startDate = new Date( props.dropDate );\n\n        // Set the new end date by adding the difference or 0\n        item.endDate = new Date( item.endDate );\n        item.endDate.setTime( item.endDate.getTime() + diff );\n\n        return item;\n    }\n\n    const initItem = item => {\n        item.startDate = new Date( props.dropDate );\n        item.endDate = new Date( props.dropDate );\n\n        // Set the intial end Date with minimum of 1 day \n        item.endDate.setTime( item.endDate.getTime() + day );\n\n        return item;\n    }\n\n    // Get the day of the week\n    const dayOfWeek = props.dropDate.getDay();\n\n    // Detect if the day is a day off (weekend)\n    const isWeekEnd = (dayOfWeek === 6) || (dayOfWeek === 0);\n\n    const overClass = isOver ? classes.DropZoneOver : null\n    const weekendClass = isWeekEnd && !props.includeWeekend ? classes.WeekendStyle : null\n\n    const dropActivated = !isWeekEnd || props.includeWeekend;\n\n    return (\n        <div \n            ref={dropActivated ? drop : null}\n            className={[classes.DropZone, overClass, weekendClass].join(' ')}\n            style={props.style}\n        >\n            <div \n                className={classes.Day} \n                style={{color: isWeekEnd || isOver ? 'white' : '#7787a8'}}\n            >\n                <div>{DAYS[dayOfWeek].substr(0,3)}</div>\n                <div>{props.dropDate.getDate()}</div>\n            </div>\n\n        </div>\n    )\n}\n\nDropZone.defaultProps = {\n    includeWeekend: false\n};\n\nDropZone.propTypes = {\n    style: PropTypes.object,\n    onDrop: PropTypes.func.isRequired,\n    includeWeekend: PropTypes.bool,\n    dropDate: PropTypes.objectOf(Date)\n}\n\nexport default DropZone;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as helpers from '../../Helpers/Functions';\nimport DropZone from '../DropZone/DropZone';\nimport classes from './DaysGrid.module.css';\nimport { MONTHS } from '../../Constants/Constants';\n\nexport const MARGIN = 20;\n\nconst DaysGrid = props => {\n\n    const { month, width, offset, ...rest} = props;\n    const daysDropGrid = [];\n    const days = helpers.getDaysInMonth( month.month, month.year);\n\n    const effectiveWidth = width - offset;\n\n    let style = {\n        width: effectiveWidth / days\n    };\n\n    for( let i = 1; i <= days; i++ )\n    {\n        if ( i === days ) style = {...style, border: 'none'};\n\n        daysDropGrid.push(\n            <DropZone \n                {...rest}\n                style={style}\n                key={`grid_${month.month}_${i}`}\n                dropDate={new Date(month.year, month.month - 1, i)}\n            />\n        ) \n    }\n\n    const borderSytle = {\n        borderLeftStyle: !props.grouped && props.index === 0 ? 'none' : 'solid',\n    }\n    \n    return (\n        <div \n            className={classes.DaysGrid} \n            style={{\n                width: effectiveWidth,\n                left: offset,\n            }}\n        >\n            <div \n                className={classes.MonthWrapper} \n                style={{\n                    ...props.style,\n                    width: effectiveWidth,\n                    ...borderSytle\n                    }}\n            >\n                <div className={classes.Month}>\n                    {`${MONTHS[props.month.month]} ${props.month.year}`}\n                </div>\n            </div>\n            <div \n                className={classes.DropZones} \n                style={{\n                    ...props.style,\n                    ...borderSytle,\n                    width: effectiveWidth\n                    }}\n                >\n                {daysDropGrid}\n            </div>\n\n        </div>\n    )\n}\n\nDaysGrid.defaultProps = {\n    width: 0,\n    grouped: false,\n    index: 0,\n    offset: 0,\n};\n\nDaysGrid.propTypes = {\n    width: PropTypes.number,\n    onDrop: PropTypes.func,\n    grouped: PropTypes.bool,\n    month: PropTypes.object,\n    index: PropTypes.number,\n    offset: PropTypes.number,\n}\n\nexport default DaysGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { rgbaFromArray } from '../../../Helpers/Functions';\nimport classes from './DefaultDetailedElement.module.css';\n\nconst alpha = 0.7;\nconst defaultColors = {\n    outerElement : [204, 204, 204],\n    innerElement : [70, 130, 180]\n}\n\nconst DefaultDetailedElement = props => {\n\n    return (\n        <div \n            className={[classes.DefaultDetailedElement, props.className].join(' ')}\n            style={{\n                background: props.innerElement ? rgbaFromArray( props.bgColor, alpha ): rgbaFromArray(defaultColors.outerElement, alpha),\n                boxShadow: props.shadowed ?'4px 4px 6px -6px rgba(0,0,0,0.75)' :  'none',\n                ...props.style,\n            }}\n                \n        >\n            <div className={classes.ItemFlex}>\n                <div className={classes.ImagesWrapper}>\n                    <img \n                        className={classes.Images} \n                        src={props.item.content.logo}\n                        alt='Logo' \n                        draggable='false' \n                        onMouseDown={event => event.preventDefault()}\n                    />\n                </div>\n                <div className={classes.Content}>\n                    <div className={classes.Line1}>\n                        {props.item.content.line1}\n                    </div>\n                    <div className={classes.Line2}>\n                        {props.item.content.line2}\n                    </div>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nDefaultDetailedElement.defaultProps = {\n    item: {\n        id: null,\n        content: {},\n        description: '',\n        startDate: '',\n        endDate: '',\n        type: 'range',\n    },\n    randomColor: false,\n    innerElement: false,\n    shadowed: false,\n    bgColor: defaultColors.innerElement\n}\n\nDefaultDetailedElement.propTypes = {\n    item: PropTypes.object.isRequired,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    innerElement: PropTypes.bool,\n    bgColor: PropTypes.array,\n    shadowed: PropTypes.bool\n}\n\nexport default DefaultDetailedElement;","import React from 'react'\nimport { useDragLayer } from 'react-dnd';\n\nimport { ELEMENT } from '../../Constants/Constants';\nimport classes from './DragPreview.module.css';\n\n\nconst getItemStyles = (initialOffset, currentOffset) => {\n    if (!initialOffset || !currentOffset) {\n        return {\n            display: 'none',\n        };\n    }\n    let { x, y } = currentOffset;\n    const transform = `translate(${x}px, ${y}px)`;\n\n    return {\n        transform,\n        WebkitTransform: transform,\n    }\n}\n\nconst DragPreview = props => {\n    const {\n        itemType,\n        isDragging,\n        item,\n        initialOffset,\n        currentOffset,\n\n    } = useDragLayer(monitor => ({\n        item: monitor.getItem(),\n        itemType: monitor.getItemType(),\n        initialOffset: monitor.getInitialSourceClientOffset(),\n        currentOffset: monitor.getSourceClientOffset(),\n        isDragging: monitor.isDragging(),\n    }))\n\n    const renderItem = () => {\n        switch (itemType) {\n          case ELEMENT:\n            return <img className={classes.ImageSytle} src={item.content.logo} alt=''/>\n          default:\n            return null\n        }\n      }\n\n    if (!isDragging || item.id) {\n        return null\n    }\n\n    return (\n        <div className={classes.DragPreview}>\n            <div \n                className={classes.ItemStyle} \n                style={getItemStyles(initialOffset, currentOffset)}\n            >\n                {renderItem()}\n            </div>\n        </div>\n    )\n}\nexport default DragPreview\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDrag } from 'react-dnd';\nimport { ELEMENT } from '../../Constants/Constants';\nimport classes from './ResizeHandle.module.css';\n\nconst ResizeHandle = props => {\n\n    const [, resize ] = useDrag({\n        item: { type: ELEMENT, ...props.item, resizing: props.orientation, moving: false },\n    })\n\n    const innerStyle = props.orientation === 'left' ? {left: 0} : {right: 0};\n\n    return (\n        <div\n            className={classes.ResizeHandle}\n            style={{...innerStyle, backgroundColor: props.bgColor}}\n            ref={resize}\n        />\n    )\n}\n\nResizeHandle.defaultProps = {\n    item: {},\n}\n\nResizeHandle.propTypes = {\n    item: PropTypes.object.isRequired,\n    orientation: PropTypes.string\n}\n\nexport default ResizeHandle;","import React, { useState } from 'react';\nimport { useDrag } from 'react-dnd';\nimport PropTypes from 'prop-types';\n\nimport { ELEMENT } from '../../Constants/Constants';\nimport { rgbaFromArray } from '../../Helpers/Functions';\nimport DefaultDetailedElement from '../DefaultElement/DefaultDetailedElement/DefaultDetailedElement';\nimport DragPreview from '../DragPreview/DragPreview';\nimport ResizeHandle from '../ResizeHandle/ResizeHandle';\nimport classes from './ElementWrapper.module.css';\n\n// Static style section \n\nconst styles = {\n\n    removeButtonLines: {\n        shared: {\n            position: 'absolute',\n            right: '14px',\n            top: '7.5px',\n            height: '15px',\n            width: '2px',\n            backgroundColor: '#E76E54',\n          },\n          first : {\n            transform: 'rotate(45deg)',\n          },\n          second : {\n            transform: 'rotate(-45deg)',\n          }\n    },\n}\n\n\n\n// Main component\nexport const ElementWrapper = props => {\n\n    const [{isDragging}, drag ] = useDrag({\n        item: { type: ELEMENT, ...props.item, resizing: null, moving: props.innerElement },\n        collect: monitor => ({\n            isDragging: !!monitor.isDragging(),\n        }),\n    });\n\n    const hoverStyle = {\n        border: `2px solid ${rgbaFromArray( props.bgColor )}`,\n        borderStyle: 'solid none solid none'\n    }\n\n    const [hoverStyleActive, setHoverStyleActive] = useState( null );\n\n    // if (isDragging && props.innerElement || isResizing) {\n    //     return <div ref={drag} />\n    // }\n\n    return (\n        <>\n            <div \n                onClick={props.onClick}\n                ref={drag}\n                className={classes.ElementWrapper}\n                style={{\n                    cursor: props.move ? 'move' : 'grab',\n                }}\n            >\n                <props.customElementType {...props} />\n\n                {\n                    props.showOccurences && props.occurences > 0\n                        ?   <div className={classes.ElementOccurences}>{props.occurences}</div>\n                        :   null\n                }\n                {\n                    props.overlay\n                        ?   <div\n                                className={classes.Overlay}\n                                style={hoverStyleActive}\n                                onMouseOver={() => setHoverStyleActive( hoverStyle )}\n                                onMouseLeave={() => setHoverStyleActive( null )}\n                            >\n                                <div \n                                    className={classes.RemoveButton} \n                                    onClick={props.remove}\n                                >\n                                    <div style={{...styles.removeButtonLines.shared, ...styles.removeButtonLines.first}}/>\n                                    <div style={{...styles.removeButtonLines.shared, ...styles.removeButtonLines.second}}/>\n                                </div>\n                                <ResizeHandle \n                                    orientation='left'\n                                    item={props.item}\n                                    bgColor={rgbaFromArray( props.bgColor )}\n                                />\n                                <ResizeHandle \n                                    orientation='right'\n                                    item={props.item}\n                                    bgColor={rgbaFromArray( props.bgColor )}\n                                />\n                            </div>\n                        :   null\n                }\n            </div>\n            {\n                !props.innerElement\n                    ?   <DragPreview />\n                    :   null\n            }\n            \n        </>\n    )\n}\n\n\n\nElementWrapper.defaultProps = {\n    item: {\n        id: null,\n        logo: '',\n        description: '',\n        startDate: '',\n        endDate: '',\n        elementType: 'range',\n    },\n    overlay: false,\n    move: false,\n    customElementType: DefaultDetailedElement,\n    occurences: 0,\n    showOccurences: false\n}\n\nElementWrapper.propTypes = {\n    item: PropTypes.object.isRequired,\n    width: PropTypes.number,\n    overlay: PropTypes.bool,\n    move: PropTypes.bool,\n    onClick: PropTypes.func,\n    remove: PropTypes.func,\n    customElementType: PropTypes.elementType,\n    bgColor: PropTypes.array,\n    occurences: PropTypes.number,\n    showOccurences: PropTypes.bool\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { rgbaFromArray } from '../../../Helpers/Functions';\nimport classes from './DefaultBasicElement.module.css';\n\nconst alpha = 0.7;\n\nconst DefaultBasicElement = props => {\n\n    return (\n        <div \n            className={[classes.DefaultBasicElement, props.className].join(' ')}\n            style={{\n                ...props.style, \n                background: rgbaFromArray( props.bgColor, alpha )}}\n        >   \n        </div>\n    )\n}\n\nDefaultBasicElement.defaultProps = {\n\n}\n\nDefaultBasicElement.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    bgColor: PropTypes.array\n}\n\nexport default DefaultBasicElement;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { ElementWrapper } from '../ElementWrapper/ElementWrapper';\nimport DefaultBasicElement from '../DefaultElement/DefaultBasicElement/DefaultBasicElement';\nimport { dayDiff, getDaysInMonth } from '../../Helpers/Functions';\nimport { COLORS } from '../../Constants/Constants';\nimport classes from './ItemsGrid.module.css';\n\nconst ItemsGrid = props => {\n\n    const [gridItems, setGridItems] = useState();\n\n    // const days = () =>{\n    //     let nbreDays = 0;\n    //     props.monthList.forEach( month => nbreDays += getDaysInMonth( month.month, month.year ));\n    //     return nbreDays;\n    // }\n    \n    const getGridTemplateColumns = () => {\n        const columnTemplate = [];\n        props.monthList.forEach( month => {\n            const days = getDaysInMonth( month.month, month.year );\n            const width = props.width / days;\n\n            for ( let i = 0; i < days ; i++ )\n            {\n                columnTemplate.push(`${width}px`);\n            }\n        });\n\n        return columnTemplate\n    }\n\n    const style = {\n        width: props.width * props.monthList.length,\n        gridTemplateColumns: getGridTemplateColumns().join(' '),\n    }\n\n\n    useEffect(() => {\n        const gridColors = [];\n\n        const newGridItems = props.items.map(( item, index) => {\n            // Exctract month and year from the project start date\n            const monthStart = props.startDate.getMonth();\n            const yearStart = props.startDate.getFullYear();\n    \n            // The gris start at day 1 for each month in the project\n            // In order to place the item correctly inside the common grid (shared between all the months)\n            // I have to calculate the exact position by calculate the number of days between the item start date\n            // and the first day of the starting month of the project\n    \n            const position = Math.round(dayDiff( item.startDate, new Date( yearStart, monthStart, 1 ))) + 1;\n\n            // Select color for the item. If itemId has already a color assigned pick it else create one\n            \n            let color = null;\n\n            // If the colorIndex is provided use it\n            if ( props.colorIndex )\n            {\n                color = COLORS[props.colorIndex]\n            }\n            else    // Else we define it by parsing the array        \n            {\n                let searchItemId = gridColors.find(i => i.itemId === item.itemId);\n\n                if ( searchItemId )\n                {\n                    color = searchItemId.color\n                }\n                else\n                {\n                    color = COLORS[gridColors.length]\n\n                    gridColors.push({\n                        itemId: item.itemId,\n                        color: color\n                    });\n                }\n            }\n    console.log(props.grouped, 'test')\n            return (\n                <div \n                    style={{\n                        gridColumn: `${position} / ${position + dayDiff( item.endDate, item.startDate ) + 1}`\n                    }} \n                    key={`item_${item.id}_${index}`}\n                >\n                    <ElementWrapper\n                        item={item}\n                        overlay\n                        move\n                        bgColor={color}\n                        elementClassName={props.elementClassName}\n                        innerElement\n                        customElementType={props.grouped ? DefaultBasicElement : props.customInnerElementType}\n                        style={{marginLeft: 0}}\n                        onClick={() => console.log(item)}\n                        remove={() => props.onRemove( item.id )}\n                    />\n                </div>\n            )\n        });\n\n        setGridItems( newGridItems );\n    }, [props.items, props.startDate]);\n\n    return (\n        <div\n            className={classes.ItemsGrid}\n            style={{...style, ...props.style}}\n        >\n            {gridItems}\n        </div>\n    );\n}\n\nItemsGrid.defaultProps = {\n    items: [],\n    monthList: [],\n    grouped: false\n}\n\nItemsGrid.propTypes = {\n    items: PropTypes.array,\n    width: PropTypes.number,\n    onRemove: PropTypes.func,\n    elementClassName: PropTypes.string,\n    customInnerElementType: PropTypes.elementType,\n    style: PropTypes.object,\n    monthList: PropTypes.array,\n    startDate: PropTypes.objectOf(Date),\n    colorIndex: PropTypes.number,\n    grouped: PropTypes.bool\n}\n\nexport default ItemsGrid;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DefaultBasicElement from '../DefaultElement/DefaultBasicElement/DefaultBasicElement';\nimport DefaultDetailedElement from '../DefaultElement/DefaultDetailedElement/DefaultDetailedElement';\nimport ItemsGrid from '../ItemsGrid/ItemsGrid';\nimport classes from './GroupItemsGrid.module.css';\n\nconst GroupItemsGrid = props => {\n\n    const [groupedItems, setGroupItems] = useState( {} );\n    const [elementHovered, setElementHovered] = useState( null );\n\n    useEffect(() => {\n        const groupedItemsTmp = {};\n        props.items.forEach( item => {\n            // Set a string ID to the group to avoid key sorting\n            const groupId = `group_${item.itemId}`\n\n            if ( !groupedItemsTmp[groupId] ) \n            {\n                groupedItemsTmp[groupId] = []\n            }\n\n            groupedItemsTmp[groupId].push( item );\n        })\n\n        setGroupItems( groupedItemsTmp );\n\n    }, [props.items, props.startDate]);\n\n    const hoverStyle = {background: 'rgba(250, 250, 250, 1'} \n\n    const grouped = (\n        Object.keys(groupedItems).map(( items, index ) => {\n            const borderStyle = \n                index < Object.keys(groupedItems).length - 1\n                    ?   {borderBottom:  '1px solid #f1f1f1'}\n                    :   null\n\n            return (\n                <React.Fragment key={`groups_items_${items}${index}`}>\n                    <div \n                        className={classes.Groups}\n                        style={elementHovered === index ? {...hoverStyle, ...borderStyle} : borderStyle} \n                        onMouseOver={() => setElementHovered( index )}\n                        onMouseLeave={() => setElementHovered( null )}\n                    >\n                        <DefaultDetailedElement \n                            item={groupedItems[items][0]} \n                            className={classes.CustomItem}\n                            style={{background: 'transparent'}}\n                        />\n                    </div>\n                    <div \n                        className={classes.Items}\n                        style={elementHovered === index ? hoverStyle : null}\n                        onMouseOver={() => setElementHovered( index )}\n                        onMouseLeave={() => setElementHovered( null )}\n                    >\n                        <ItemsGrid \n                            {...props}\n                            width={props.width - props.leftWidth} /* Set the width of the itemGrid to fit inside the grid defined*/\n                            style={{\n                                ...props.style,\n                                ...borderStyle,\n                                marginTop: 0\n                            }}\n                            items={groupedItems[items]}\n                            colorIndex={index}\n                            grouped\n                        />\n                    </div>\n                </React.Fragment>\n            )\n        })\n    )\n\n    return (\n        <div \n            className={classes.GroupViewGrid} \n            style={{\n                width: `${(props.width - props.leftWidth) * props.monthList.length + props.leftWidth}px`,\n                gridTemplateColumns: `${props.leftWidth}px ${(props.width - props.leftWidth) * props.monthList.length}px`\n            }}\n        >\n            <div className={classes.SpacerLeft} />\n            <div className={classes.SpacerRight} />\n            {grouped}\n        </div>\n    )\n}\n\nGroupItemsGrid.defaultProps = {\n    items: [],\n    customElementType: DefaultBasicElement,\n    leftWidth: 220\n}\n\nGroupItemsGrid.propTypes = {\n    items: PropTypes.array,\n    customElementType: PropTypes.elementType,\n    startDate: PropTypes.objectOf(Date),\n    leftWidth: PropTypes.number\n}\n\nexport default GroupItemsGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DaysGrid from '../DaysGrid/DaysGrid';\nimport ItemsGrid from '../ItemsGrid/ItemsGrid';\nimport GroupItemsGrid from '../GroupItemsGrid/GroupItemsGrid';\n\nconst leftWidth = 220;\n\nconst LayoutGrid = props => {\n\n    const daysGridElements = ( width, offset ) => (\n        props.monthList.map(( month, index ) => (\n            <DaysGrid \n                key={`daysGrid_${month.month}_${month.year}`}\n                onDrop={props.onDrop}\n                month={month}\n                index={index}\n                scroll={props.scroll}\n                grouped={props.grouped}\n                offset={offset}\n                width={width}\n                style={{transform: `translateX(${( 100 * index ) - ( 100 * props.currentMonth )}%)`}}\n            >\n            </DaysGrid>\n        ))\n    );\n\n\n    //Inline view without groups \n    const inLineStyle = (\n        <>\n            {daysGridElements( props.width )}\n            <ItemsGrid {...props} style={{transform: `translateX(-${( props.width * props.currentMonth )}px)`}}/>\n        </>\n    )\n\n    // Groups view\n    const groupedStyle = (\n        <>\n            {daysGridElements( props.width, leftWidth )}\n            <GroupItemsGrid\n                {...props} \n                width={props.width}\n                leftWidth={leftWidth}\n                style={{transform: `translateX(-${(( props.width - leftWidth ) * props.currentMonth )}px)`}}\n            />\n        </>\n    )\n\n    return (\n        <>\n        {\n            !props.grouped\n                ?   inLineStyle\n                :   groupedStyle\n        }\n        </>\n    )\n\n}\n\nLayoutGrid.defaultProps = {\n    monthList: [],\n    currentMonth: 0,\n    scroll: false\n}\n\nLayoutGrid.propTypes = {\n    grouped: PropTypes.bool,\n    monthList: PropTypes.array,\n    currentMonth: PropTypes.number,\n    onDrop: PropTypes.func,\n    width: PropTypes.number,\n    scroll: PropTypes.bool\n}\n\nexport default LayoutGrid;","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as helpers from '../Helpers/Functions';\nimport MonthSelector from '../Components/MonthSelector/MonthSelector';\nimport LayoutGrid from '../Components/LayoutGrid/LayoutGrid';\n\nimport classes from './Planner.module.css';\n\n\n// Component\nexport const Planner = props => {\n\n    const baseIndex = 100000000;\n    const PlannerRef = useRef();\n    const borderSize = 1;\n\n    const [items, setItems] = useState( [] );\n    const [PlannerWidth, setPlannerWidth] = useState( 0 );\n    const [monthList, setMonthList] = useState( [] );\n    const [currentMonth, setCurrentMonth] = useState( 0 );\n\n    // Get the higher id and increase\n    const getNextId = () => {\n        return Math.max.apply(Math, items.map(item => { return item.id; })) + 1\n    }\n\n    // Loop inside props.items to assign an ID if missing\n\n    useEffect (() => {\n        const verifiedItems = [];\n\n        props.items.forEach(( item, index ) => {\n            const tmpItem = {\n                ...item,\n                startDate: item.startDate ? new Date(item.startDate) : null,\n                endDate: item.endDate ? new Date(item.endDate) : null\n            }\n\n            if ( item.id ){\n                verifiedItems.push(tmpItem);\n            }\n            else{\n                verifiedItems.push({\n                    ...tmpItem,\n                    id: baseIndex + index\n                })\n            }\n        });\n\n        verifiedItems.sort((a, b) => {\n            a = a.startDate;\n            b = b.startDate;\n            return a<b ? -1 : a>b ? 1 : 0;\n        });\n\n        setItems( verifiedItems );\n\n    }, [props.items]);\n\n    // Update boxes size on window resized\n    useEffect(() => {\n\n        const tmpMonths = [];\n        let startDate = new Date( props.options.startDate );\n        const endDate = new Date( props.options.endDate );\n\n        const nbreMonth = helpers.monthDiff( startDate, endDate );\n\n        for (let i = 0; i < nbreMonth; i++){\n            tmpMonths.push({\n                    month: startDate.getMonth() + i + 1 ,\n                    year: startDate.getFullYear()\n                })\n        }\n        setMonthList( tmpMonths );\n        updateScreenSizeHandler();\n\n        window.addEventListener( 'resize', updateScreenSizeHandler );\n        return () => window.removeEventListener( 'resize', updateScreenSizeHandler );\n    }, [props.options.startDate, props.options.endDate]);\n\n\n    const updateScreenSizeHandler = () => {\n        // Get the Planner element size \n        const PlannerElement = PlannerRef.current.getBoundingClientRect();\n\n        // Update the state with the width of the timneline width\n        setPlannerWidth( PlannerElement.width - ( borderSize * 2 ));\n\n    }\n\n    const onDropHandler = ( item, propagate ) => {\n\n        // Parsing data from dropped component\n        //const item = JSON.parse(event.dataTransfer.getData(\"text\"));\n        const newItems = [...items];\n        let existingId = -1;\n        let tmpItem = {\n            ...item,\n            id: item.id ? item.id : getNextId(), // Check if the item has an ID and if not assign one\n        }\n\n        //Check if the item is updated or created\n        if ( item.id )\n        {\n            existingId = newItems.findIndex( i => i.id === item.id );\n        }\n\n        // Add the new item to the item array only if it is not already present\n        if( existingId === -1 )\n        {\n            newItems.push( tmpItem );\n            if ( props.options.callBacks.onAdd && propagate ) props.options.callBacks.onAdd({item: {...tmpItem}, items: [...newItems]});\n        }\n        else //Update item\n        {\n            newItems[existingId] = tmpItem;\n            if ( props.options.callBacks.onUpdate && propagate ) props.options.callBacks.onUpdate({item: {...tmpItem}, items: [...newItems]});\n        }\n\n        // Update state with the updated items array\n        setItems( newItems );\n\n\n    }\n\n    const onRemoveItemHandler = itemID => {\n        const newItems = [...items];\n        let item = null;\n\n        const found = newItems.findIndex(i => i.id === itemID );\n\n        // Remove the item at the 'index' position if founded\n        if ( found !== -1 )\n        {\n            item = newItems[found];\n            newItems.splice( found, 1 );\n            // Update state with the new array items\n            setItems( newItems );\n        }\n        else \n        {\n            console.log(`ID : ${itemID} not found`);\n        }\n\n        if ( props.options.callBacks.onRemove ) props.options.callBacks.onRemove({item: {...item}, items: [...newItems]});\n    }\n\n    // Props list to pass to the Layout component\n\n    const propagatedProps = {\n        items: items,\n        width: PlannerWidth,\n        monthList: monthList,\n        currentMonth: currentMonth,\n        onRemove: onRemoveItemHandler,\n        onDrop: onDropHandler,\n        grouped: props.grouped,\n        scroll: props.scroll,\n        customInnerElementType: props.customInnerElementType,\n        elementClassName: props.elementClassName,\n        startDate: new Date( props.options.startDate ),\n    }\n\n    return (\n        <>\n            <div\n                className={`${props.className}`}\n                style={{\n                    border: `${borderSize}px solid #ccc`, \n                    overflowX: props.scroll ? 'scroll' : 'hidden',\n                    ...props.style\n                }}\n                ref={PlannerRef}\n            >\n                \n                <LayoutGrid {...propagatedProps} />\n                \n            </div>\n            \n            {\n                !props.scroll\n                    ?   <MonthSelector \n                            monthList={monthList}\n                            currentMonth={currentMonth}\n                            previousMonthHandler={() => setCurrentMonth( currentMonth - 1 <= 0 ? 0 : currentMonth - 1 )}\n                            nextMonthHandler={() => setCurrentMonth( currentMonth + 1 >= monthList.length - 1 ? monthList.length - 1 : currentMonth + 1 )}\n                        />\n                    :   null\n            }\n\n        </>\n    )\n}\n\n\nPlanner.defaultProps = {\n    items: [],\n    options: {\n        callBacks: {\n            onAdd: null,\n            onRemove: null,\n            onUpdate: null\n        },\n        startDate: new Date().toISOString(),\n        endDate: new Date().setMonth( new Date().getMonth() + 1)\n    },\n    scroll: false,\n    grouped: false,\n    className: classes.PlannerDefault\n};\n\nPlanner.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    onDragClass: PropTypes.string,\n    elementClassName: PropTypes.string,\n    items: PropTypes.array,\n    customInnerElementType: PropTypes.elementType,\n    options: PropTypes.shape({\n        callBacks: PropTypes.shape({\n            onAdd: PropTypes.func,\n            onRemove: PropTypes.func,\n            onUpdate: PropTypes.func\n        }),\n        startDate: PropTypes.string.isRequired,\n        endDate: PropTypes.string.isRequired\n    }),\n    scroll: PropTypes.bool,\n    grouped: PropTypes.bool,\n}\n","import React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\n//import HTML5Backend from 'react-dnd-html5-backend';\nimport MouseBackEnd from 'react-dnd-mouse-backend'\n\nimport classes from './App.module.css';\n\nimport { Planner, ElementWrapper} from './react-planning';\n\n//import logo\nimport logo1 from './assets/images/logo1.png';\nimport logo2 from './assets/images/logo2.png';\nimport logo3 from './assets/images/logo3.png';\nimport logo4 from './assets/images/logo4.png';\nimport logo5 from './assets/images/logo5.png';\nimport logo6 from './assets/images/logo6.png';\nimport logo7 from './assets/images/logo7.png';\n\n\n//Internal Component \n\nconst Option = props => (\n    <div className={classes.Option}>\n        <span style={{marginRight: '10px', fontSize: '14px'}}>{props.children}</span>\n        <label className={classes.Switch}>\n            <input type=\"checkbox\" checked={props.checked} onChange={props.onChange}/>\n            <span className={`${classes.Slider} ${classes.Round}`}></span>\n        </label>\n    </div>\n)\n\n\nconst App = () =>  {\n\n    const [scrollEnabled, setScrollEnabled] = useState( true );\n    const [groupedEnabled, setGroupedEnabled] = useState( true );\n    const [showOccurences, setShowOccurences] = useState( true );\n\n    const items = [\n        {\n            itemId: 1,\n            content: {\n                logo: logo1,\n                line1: 'Caro Confort',\n                line2: 'Carrelage'\n            }\n        },\n        {\n            itemId: 2,\n            content: {\n                logo: logo2,\n                line1: 'AB Menuiserie',\n                line2: 'Menuiserie'\n            }\n        },\n        {\n            itemId: 3,\n            content: {\n                logo: logo3,\n                line1: 'Fournier',\n                line2: 'Electricité'\n            }\n        },\n        {\n            itemId: 4,\n            content: {\n                logo: logo4,\n                line1: 'Krëfel',\n                line2: 'Cuisine'\n            }\n        },\n        {\n            itemId: 5,\n            content: {\n                logo: logo5,\n                line1: 'MG Terrassements',\n                line2: 'Terrassement'\n            }\n        },\n        {\n            itemId: 6,\n            content: {\n                logo: logo6,\n                line1: 'Roosens Bétons',\n                line2: 'Maçon'\n            },\n        },\n        {\n            itemId: 7,\n            content: {\n                logo: logo7,\n                line1: 'Sopi Façades',\n                line2: 'Façade'\n            }\n        }\n    ];\n\n    const [fixedItems, setFixedItems] = useState([\n        {\n            ...items[0],\n            startDate: '2019-10-02',\n            endDate: '2019-10-08',\n            elementType: 'range',\n        },\n        {\n            ...items[5],\n            startDate: '2019-10-08',\n            endDate: '2019-10-12',\n            elementType: 'range',\n        },\n        {\n            ...items[3],\n            startDate: '2019-10-15',\n            endDate: '2019-10-17',\n            elementType: 'range',\n        },\n        {\n            ...items[1],\n            startDate: '2019-10-25',\n            endDate: '2019-10-29',\n            elementType: 'range',\n        },\n        {\n            ...items[2],\n            startDate: '2019-11-15',\n            endDate: '2019-11-18',\n            elementType: 'range',\n        },\n        {\n            ...items[6],\n            startDate: '2019-11-14',\n            endDate: '2019-11-21',\n            elementType: 'range',\n        },\n        {\n            ...items[1],\n            startDate: '2019-11-20',\n            endDate: '2019-11-29',\n            elementType: 'range',\n        },\n        {\n            ...items[0],\n            startDate: '2019-12-07',\n            endDate: '2019-12-17',\n            elementType: 'range',\n        },\n        {\n            ...items[2],\n            startDate: '2019-12-22',\n            endDate: '2019-12-27',\n            elementType: 'range',\n        }\n    ]);\n\n    const [occurences, setOccurences] = useState({});\n\n    useEffect(() => {\n        if ( showOccurences )\n        {\n            let itemsOccurences = {}\n            fixedItems.forEach( item => {\n                itemsOccurences = {\n                    ...itemsOccurences,\n                    [item.itemId] : itemsOccurences[item.itemId] ? itemsOccurences[item.itemId]  + 1 : 1\n                }\n            });\n\n            setOccurences( itemsOccurences );\n        }\n    }, [fixedItems, showOccurences]);\n\n    const startDate = '2019-10-01';\n    const endDate = '2019-12-31';\n\n    const addHandler = ( {item, items} ) => {\n        console.log( `Added : ${item}` );\n        setFixedItems( items );\n    }\n\n    const removeHandler = ( {item, items} ) => {\n        console.log( `Removed : ${item}` );\n        setFixedItems( items );\n    }\n\n    const updateHandler = ( {item, items} ) => {\n        console.log( `Updated : ${item}` );\n        setFixedItems( items );\n    }\n\n    const options = {\n        callBacks : {\n            onAdd : addHandler,\n            onRemove: removeHandler,\n            onUpdate: updateHandler\n        },\n        startDate : startDate, \n        endDate: endDate\n    }\n\n\n    return (\n        <DndProvider backend={MouseBackEnd}>\n            <div className={classes.Content}>\n                <p>Options</p>\n                <div className={classes.Options}>\n                    <Option checked={scrollEnabled} onChange={() => setScrollEnabled( !scrollEnabled )}>\n                        Enable Scroll\n                    </Option>\n                    <Option checked={groupedEnabled} onChange={() => setGroupedEnabled( !groupedEnabled )}>\n                        Grouped View\n                    </Option>\n                    <Option checked={showOccurences} onChange={() => setShowOccurences( !showOccurences )}>\n                        Show Occurences\n                    </Option>\n                </div>\n                <p>Droppable Items</p>\n                <div className={classes.Elements}>\n                    {\n                        items.map(( item, index ) => (\n                            <div style={{marginRight: '10px'}} key={`main_item_${index}`}>\n                                <ElementWrapper \n                                    item={item}\n                                    shadowed\n                                    showOccurences={showOccurences}\n                                    occurences={occurences[item.itemId]}\n                                />\n                            </div>\n                        ))\n                    }\n                </div>\n                <div className={classes.Timeline}>\n                    <Planner items={fixedItems} options={options} scroll={scrollEnabled} grouped={groupedEnabled}/>\n                </div>\n\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}