{"version":3,"sources":["App.module.css","Timeline/Components/GroupItemsGrid/GroupItemsGrid.module.css","Timeline/Components/DefaultElement/DefaultDetailedElement/DefaultDetailedElement.module.css","Timeline/Components/DropZone/DropZone.module.css","Timeline/Components/DaysGrid/DaysGrid.module.css","Timeline/Components/ElementWrapper/ElementWrapper.module.css","Timeline/Components/MonthSelector/MonthSelector.module.css","Timeline/Components/DragPreview/DragPreview.module.css","Timeline/Components/ResizeHandle/ResizeHandle.module.css","Timeline/Components/ItemsGrid/ItemsGrid.module.css","Timeline/Components/DefaultElement/DefaultBasicElement/DefaultBasicElement.module.css","Timeline/Timeline.module.css","assets/images/logo1.png","assets/images/logo2.png","assets/images/logo3.png","assets/images/logo4.png","assets/images/logo5.png","assets/images/logo6.png","assets/images/logo7.png","Timeline/Helpers/Functions.js","Timeline/Constants.js","Timeline/Components/MonthSelector/MonthSelector.jsx","Timeline/Components/DropZone/DropZone.jsx","Timeline/Components/DaysGrid/DaysGrid.jsx","Timeline/Components/DefaultElement/DefaultDetailedElement/DefaultDetailedElement.jsx","Timeline/Components/DragPreview/DragPreview.jsx","Timeline/Components/ResizeHandle/ResizeHandle.jsx","Timeline/Components/ElementWrapper/ElementWrapper.jsx","Timeline/Components/ItemsGrid/ItemsGrid.jsx","Timeline/Components/DefaultElement/DefaultBasicElement/DefaultBasicElement.jsx","Timeline/Components/GroupItemsGrid/GroupItemsGrid.jsx","Timeline/Components/LayoutGrid/LayoutGrid.jsx","Timeline/Timeline.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","getDaysInMonth","month","year","Date","getDate","dayDiff","d1","d2","Math","round","abs","getTime","rgbaFromArray","arr","alpha","length","join","MONTHS","DAYS","COLORS","MonthSelector","props","currentMonthStr","monthList","currentMonth","currentYear","previousMonthButton","className","classes","Button","style","color","onClick","previousMonthHandler","nextMonthbutton","nextMonthHandler","scroll","defaultProps","DropZone","useDrop","accept","drop","item","updatedItem","resizing","moving","initItem","onDrop","hover","monitor","hovered","resizeItem","moveItem","setHovered","collect","isOver","useState","useEffect","endDate","dropDate","startDate","diff","setTime","dayOfWeek","getDay","isWeekEnd","overClass","DropZoneOver","weekendClass","includeWeekend","WeekendStyle","dropActivated","ref","Day","substr","DaysGrid","width","offset","rest","daysDropGrid","days","helpers","effectiveWidth","i","border","push","key","borderSytle","borderLeftStyle","grouped","index","left","MonthWrapper","Month","DropZones","defaultColors","outerElement","innerElement","DefaultDetailedElement","background","bgColor","boxShadow","shadowed","ItemFlex","ImagesWrapper","Images","src","logo","alt","draggable","onMouseDown","event","preventDefault","Description","description","id","type","randomColor","getItemStyles","initialOffset","currentOffset","display","x","y","transform","WebkitTransform","DragPreview","useDragLayer","getItem","itemType","getItemType","getInitialSourceClientOffset","getSourceClientOffset","isDragging","ItemStyle","ImageSytle","renderItem","ResizeHandle","useDrag","orientation","resize","innerStyle","right","backgroundColor","styles","shared","position","top","height","first","second","ElementWrapper","drag","hoverStyle","borderStyle","hoverStyleActive","setHoverStyleActive","cursor","move","customElementType","showOccurences","occurences","ElementOccurences","overlay","Overlay","onMouseOver","onMouseLeave","RemoveButton","remove","elementType","ItemsGrid","gridItems","setGridItems","gridTemplateColumns","columnTemplate","forEach","getGridTemplateColumns","gridColors","newGridItems","items","map","monthStart","getMonth","yearStart","getFullYear","colorIndex","searchItemId","find","itemId","gridColumn","elementClassName","customInnerElementType","marginLeft","console","log","onRemove","DefaultBasicElement","GroupItemsGrid","groupedItems","setGroupItems","elementHovered","setElementHovered","groupedItemsTmp","groupId","Object","keys","borderBottom","Fragment","Groups","CustomItem","Items","leftWidth","marginTop","GroupViewGrid","SpacerLeft","SpacerRight","LayoutGrid","daysGridElements","inLineStyle","groupedStyle","Timeline","timelineRef","useRef","setItems","timelineWidth","setTimelineWidth","setMonthList","setCurrentMonth","verifiedItems","tmpItem","sort","a","b","tmpMonths","options","nbreMonth","months","updateScreenSizeHandler","window","addEventListener","removeEventListener","timelineElement","current","getBoundingClientRect","borderSize","propagatedProps","itemID","newItems","found","findIndex","splice","callBacks","propagate","existingId","max","apply","onAdd","onUpdate","overflowX","toISOString","setMonth","TimelineDefault","Option","marginRight","fontSize","children","Switch","checked","onChange","Slider","Round","App","scrollEnabled","setScrollEnabled","groupedEnabled","setGroupedEnabled","setShowOccurences","logo1","logo2","logo3","logo4","logo5","logo6","logo7","fixedItems","setFixedItems","setOccurences","itemsOccurences","backend","MouseBackEnd","Content","Options","Elements","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8be566d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"App_Content__ZaMNr\",\"Elements\":\"App_Elements__fmpcd\",\"Timeline\":\"App_Timeline__3mVrs\",\"Switch\":\"App_Switch__3kBoA\",\"Slider\":\"App_Slider__15T2R\",\"Round\":\"App_Round__R_A5H\",\"Options\":\"App_Options__3b1fw\",\"Option\":\"App_Option__LaFRR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"GroupViewGrid\":\"GroupItemsGrid_GroupViewGrid__HU6TN\",\"SpacerLeft\":\"GroupItemsGrid_SpacerLeft__3yCoe\",\"SpacerRight\":\"GroupItemsGrid_SpacerRight__3GmnG\",\"Groups\":\"GroupItemsGrid_Groups__jQmY-\",\"Items\":\"GroupItemsGrid_Items__2NC82\",\"CustomItem\":\"GroupItemsGrid_CustomItem__3b5NJ\",\"Shadowed\":\"GroupItemsGrid_Shadowed__3PZ2K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DefaultDetailedElement\":\"DefaultDetailedElement_DefaultDetailedElement__3WB_T\",\"ItemFlex\":\"DefaultDetailedElement_ItemFlex__3iW9A\",\"Description\":\"DefaultDetailedElement_Description__1k8nF\",\"ImagesWrapper\":\"DefaultDetailedElement_ImagesWrapper__1fe_4\",\"Images\":\"DefaultDetailedElement_Images__oz5kC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DropZone\":\"DropZone_DropZone__3Abg-\",\"DropZoneOver\":\"DropZone_DropZoneOver__1knqV\",\"Day\":\"DropZone_Day__1IcsS\",\"WeekendStyle\":\"DropZone_WeekendStyle__PSsAU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DaysGrid\":\"DaysGrid_DaysGrid__1BAo2\",\"DropZones\":\"DaysGrid_DropZones__2-GoM\",\"MonthWrapper\":\"DaysGrid_MonthWrapper__3VkMr\",\"Month\":\"DaysGrid_Month__i_YIP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ElementWrapper\":\"ElementWrapper_ElementWrapper__3UQ8Q\",\"ElementOccurences\":\"ElementWrapper_ElementOccurences__3i3Jy\",\"Overlay\":\"ElementWrapper_Overlay__9E-ib\",\"RemoveButton\":\"ElementWrapper_RemoveButton__4bgFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MonthSelector\":\"MonthSelector_MonthSelector__2DtuE\",\"Button\":\"MonthSelector_Button__34orj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DragPreview\":\"DragPreview_DragPreview__nQhug\",\"ItemStyle\":\"DragPreview_ItemStyle__2eaX_\",\"ImageSytle\":\"DragPreview_ImageSytle__1vtCt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResizeHandle\":\"ResizeHandle_ResizeHandle__2K2Bp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ItemsGrid\":\"ItemsGrid_ItemsGrid__3lCP3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DefaultBasicElement\":\"DefaultBasicElement_DefaultBasicElement__2Bo_7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimelineDefault\":\"Timeline_TimelineDefault__8fRqg\"};","module.exports = __webpack_public_path__ + \"static/media/logo1.c2891fdd.png\";","module.exports = __webpack_public_path__ + \"static/media/logo2.8d314fc0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo3.7cae2123.png\";","module.exports = __webpack_public_path__ + \"static/media/logo4.f2ce6af0.png\";","module.exports = __webpack_public_path__ + \"static/media/logo5.fb95f4c3.png\";","module.exports = __webpack_public_path__ + \"static/media/logo6.e5e58d31.png\";","module.exports = __webpack_public_path__ + \"static/media/logo7.6acd8367.png\";","\nexport const day = 1000 * 60 * 60 * 24;\n\nexport const getDaysInMonth = ( month, year ) => {\n   return new Date(year, month, 0).getDate();\n}\n\nexport const monthDiff = (d1, d2) => {\n    let months;\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return months <= 0 ? 0 : months + 1;\n}\n\nexport const dayDiff = (d1, d2) => {\n    return Math.round(Math.abs(( new Date(d1).getTime() - new Date(d2).getTime() ) / day ));\n}\n\nexport const timeDiff = (d1, d2) => {\n    return new Date(d1).getTime() - new Date(d2).getTime();\n}\n\nexport const randomRGBAColor = ( alpha, min, max ) => {\n    const minByte = min ? min : 0;\n    const maxByte = max ? max : 255;\n    const randomNumber = () => Math.floor(Math.random() * (maxByte - minByte + 1) + minByte);\n    return `rgba(${[randomNumber(), randomNumber(), randomNumber(), alpha].join(',')})`\n}\n\nexport const rgbaFromArray = (arr, alpha) => {\n    if ( !arr || arr.length !== 3 ) return null;\n    return `rgba(${arr.join(',')}, ${alpha ? alpha : 1})`;\n}\n","export const ELEMENT = 'ELEMENT';\nexport const MONTHS = [ \n    \"\" \n    ,\"January\"\n    ,\"February\"\n    ,\"March\"\n    ,\"April\"\n    ,\"May\"\n    ,\"June\"\n    ,\"July\"\n    ,\"August\"\n    ,\"September\"\n    ,\"October\"\n    ,\"November\"\n    ,\"December\" \n];\nexport const DAYS = [\n    \"Sunday\"\n    ,\"Monday\"\n    ,\"Tuesday\"\n    ,\"Wednesday\"\n    ,\"Thursday\"\n    ,\"Friday\"\n    ,\"Saturday\"];\nexport const COLORS = [\n    [252, 226, 194]   // Bisque\n    , [179, 200, 200] // Pastel Blue\n    , [108, 178, 209] // Iceberg\n    , [79, 158, 196]  // Celestial Blue \n    , [193, 231, 227] // Columbia Blue\n    , [220, 255, 251] // Light Cyan\n    , [255, 220, 244] // Pink Lace\n    , [218, 191, 222] // Thistle\n    , [193, 187, 221] // Lavender Gray\n]","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { MONTHS } from '../../Constants';\nimport classes from './MonthSelector.module.css';\n\nconst MonthSelector = props => {\n\n    const currentMonthStr = props.monthList[props.currentMonth] ? MONTHS[props.monthList[props.currentMonth].month] : '';\n    const currentYear = props.monthList[props.currentMonth] ? props.monthList[props.currentMonth].year : '';\n\n    const previousMonthButton = (\n        <p \n            className={classes.Button}\n            style={{color: props.currentMonth === 0 ? '#ccc' : 'black'}} \n            onClick={props.previousMonthHandler}\n        >\n            &#60;\n        </p>\n    )\n\n    const nextMonthbutton = (\n        <p \n            className={classes.Button}\n            style={{color: props.currentMonth === props.monthList.length -1 ? '#ccc' : 'black'}} \n            onClick={props.nextMonthHandler}\n        >\n            &#62;\n        </p>\n    )\n\n    return (\n        <div className={classes.MonthSelector}>\n            {\n                !props.scroll\n                    ?   previousMonthButton\n                    :   null   \n            }\n\n            <p>{`${currentMonthStr} - ${currentYear}`}</p>\n            \n            {\n                !props.scroll\n                    ?   nextMonthbutton\n                    :   null\n            }\n\n        </div>\n    );\n}\n\nMonthSelector.defaultProps = {\n    monthList : []\n}\n\nMonthSelector.propTypes = {\n    monthList : PropTypes.array.isRequired,\n    currentMonth : PropTypes.number.isRequired,\n    previousMonthHandler : PropTypes.func.isRequired,\n    nextMonthHandler : PropTypes.func.isRequired,\n    scroll: PropTypes.bool,\n}\n\nexport default MonthSelector;","import React, { useState, useEffect } from 'react';\nimport { useDrop } from 'react-dnd';\nimport PropTypes from 'prop-types';\n\nimport { ELEMENT, DAYS } from '../../Constants';\nimport { timeDiff, day } from '../../Helpers/Functions';\nimport classes from './DropZone.module.css';\n\nconst DropZone = props => {\n\n    const [{ isOver }, drop] = useDrop({\n        accept: ELEMENT,\n        drop: item => {\n            let updatedItem = item;\n            if ( !item.resizing && !item.moving )\n            {\n                updatedItem = initItem( item );\n            }\n            \n            props.onDrop( updatedItem, true );\n        },\n        hover: ( item, monitor ) => {\n            if ( !hovered && ( item.resizing || item.moving ) ) {\n                let updatedItem = item;\n                if ( item.resizing )\n                {\n                    updatedItem = resizeItem( item );\n                }\n                else if ( item.moving ){\n                    updatedItem = moveItem( item );\n                }\n                \n                props.onDrop( updatedItem );\n                setHovered( true );\n            }\n        },\n\t\tcollect: monitor => ({\n\t\t\tisOver: !!monitor.isOver(),\n\t\t}),\n    });\n\n    const[hovered, setHovered] = useState( false );\n\n\n    useEffect(() => {\n        setHovered( false );\n    }, [isOver]);\n\n\n    // Resize the item on over\n    const resizeItem = item => {\n\n        if (item.resizing === 'right')\n        {\n            item.endDate = props.dropDate;\n            return item;\n        }\n        if (item.resizing === 'left')\n        {\n            item.startDate = props.dropDate;\n            return item;\n        }\n        return null // If the value of resizing is not left or right\n    }\n\n    // Update the item on drop and propagate to host element\n    const moveItem = item => {\n        \n        // Get the time difference between  previously set startDate and the new one\n        let diff = item.startDate ? timeDiff( props.dropDate, item.startDate ) : 0;\n\n        // Set the updated date\n        item.startDate = new Date( props.dropDate );\n\n        // Set the new end date by adding the difference or 0\n        item.endDate = new Date( item.endDate );\n        item.endDate.setTime( item.endDate.getTime() + diff );\n\n        return item;\n    }\n\n    const initItem = item => {\n        item.startDate = new Date( props.dropDate );\n        item.endDate = new Date( props.dropDate );\n\n        // Set the intial end Date with minimum of 1 day \n        item.endDate.setTime( item.endDate.getTime() + day );\n\n        return item;\n    }\n\n    // Get the day of the week\n    const dayOfWeek = props.dropDate.getDay();\n\n    // Detect if the day is a day off (weekend)\n    const isWeekEnd = (dayOfWeek === 6) || (dayOfWeek === 0);\n\n    const overClass = isOver ? classes.DropZoneOver : null\n    const weekendClass = isWeekEnd && !props.includeWeekend ? classes.WeekendStyle : null\n\n    const dropActivated = !isWeekEnd || props.includeWeekend;\n\n    return (\n        <div \n            ref={dropActivated ? drop : null}\n            className={[classes.DropZone, overClass, weekendClass].join(' ')}\n            style={props.style}\n        >\n            <div \n                className={classes.Day} \n                style={{color: isWeekEnd || isOver ? 'white' : '#7787a8'}}\n            >\n                <div>{DAYS[dayOfWeek].substr(0,3)}</div>\n                <div>{props.dropDate.getDate()}</div>\n            </div>\n\n        </div>\n    )\n}\n\nDropZone.defaultProps = {\n    includeWeekend: false\n};\n\nDropZone.propTypes = {\n    style: PropTypes.object,\n    onDrop: PropTypes.func.isRequired,\n    includeWeekend: PropTypes.bool,\n    dropDate: PropTypes.objectOf(Date)\n}\n\nexport default DropZone;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as helpers from '../../Helpers/Functions';\nimport DropZone from '../DropZone/DropZone';\nimport classes from './DaysGrid.module.css';\nimport { MONTHS } from '../../Constants';\n\nexport const MARGIN = 20;\n\nconst DaysGrid = props => {\n\n    const { month, width, offset, ...rest} = props;\n    const daysDropGrid = [];\n    const days = helpers.getDaysInMonth( month.month, month.year);\n\n    const effectiveWidth = width - offset;\n\n    let style = {\n        width: effectiveWidth / days\n    };\n\n    for( let i = 1; i <= days; i++ )\n    {\n        if ( i === days ) style = {...style, border: 'none'};\n\n        daysDropGrid.push(\n            <DropZone \n                {...rest}\n                style={style}\n                key={`grid_${month.month}_${i}`}\n                dropDate={new Date(month.year, month.month - 1, i)}\n            />\n        ) \n    }\n\n    const borderSytle = {\n        borderLeftStyle: !props.grouped && props.index === 0 ? 'none' : 'solid',\n    }\n    \n    return (\n        <div \n            className={classes.DaysGrid} \n            style={{\n                width: effectiveWidth,\n                left: offset,\n            }}\n        >\n            <div \n                className={classes.MonthWrapper} \n                style={{\n                    ...props.style,\n                    width: effectiveWidth,\n                    ...borderSytle\n                    }}\n            >\n                <div className={classes.Month}>\n                    {`${MONTHS[props.month.month]} ${props.month.year}`}\n                </div>\n            </div>\n            <div \n                className={classes.DropZones} \n                style={{\n                    ...props.style,\n                    ...borderSytle,\n                    width: effectiveWidth\n                    }}\n                >\n                {daysDropGrid}\n            </div>\n\n        </div>\n    )\n}\n\nDaysGrid.defaultProps = {\n    width: 0,\n    grouped: false,\n    index: 0,\n    offset: 0,\n};\n\nDaysGrid.propTypes = {\n    width: PropTypes.number,\n    onDrop: PropTypes.func,\n    grouped: PropTypes.bool,\n    month: PropTypes.object,\n    index: PropTypes.number,\n    offset: PropTypes.number,\n}\n\nexport default DaysGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { rgbaFromArray } from '../../../Helpers/Functions';\nimport classes from './DefaultDetailedElement.module.css';\n\nconst alpha = 0.7;\nconst defaultColors = {\n    outerElement : [204, 204, 204],\n    innerElement : [70, 130, 180]\n}\n\nconst DefaultDetailedElement = props => {\n\n    return (\n        <div \n            className={[classes.DefaultDetailedElement, props.className].join(' ')}\n            style={{\n                background: props.innerElement ? rgbaFromArray( props.bgColor, alpha ): rgbaFromArray(defaultColors.outerElement, alpha),\n                boxShadow: props.shadowed ?'4px 4px 6px -6px rgba(0,0,0,0.75)' :  'none',\n                ...props.style,\n            }}\n                \n        >\n            <div className={classes.ItemFlex}>\n                <div className={classes.ImagesWrapper}>\n                    <img \n                        className={classes.Images} \n                        src={props.item.logo} \n                        alt='Logo' \n                        draggable='false' \n                        onMouseDown={event => event.preventDefault()}\n                    />\n                </div>\n                <div className={classes.Description}>\n                    {\n                        props.item.description\n                    }\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nDefaultDetailedElement.defaultProps = {\n    item: {\n        id: null,\n        logo: '',\n        description: '',\n        startDate: '',\n        endDate: '',\n        type: 'range',\n    },\n    randomColor: false,\n    innerElement: false,\n    shadowed: false,\n    bgColor: defaultColors.innerElement\n}\n\nDefaultDetailedElement.propTypes = {\n    item: PropTypes.object.isRequired,\n    style: PropTypes.object,\n    className: PropTypes.string,\n    innerElement: PropTypes.bool,\n    bgColor: PropTypes.array,\n    shadowed: PropTypes.bool\n}\n\nexport default DefaultDetailedElement;","import React from 'react'\nimport { useDragLayer } from 'react-dnd';\n\nimport { ELEMENT } from '../../Constants';\nimport classes from './DragPreview.module.css';\n\n\nconst getItemStyles = (initialOffset, currentOffset) => {\n    if (!initialOffset || !currentOffset) {\n        return {\n            display: 'none',\n        };\n    }\n    let { x, y } = currentOffset;\n    const transform = `translate(${x}px, ${y}px)`;\n\n    return {\n        transform,\n        WebkitTransform: transform,\n    }\n}\n\nconst DragPreview = props => {\n    const {\n        itemType,\n        isDragging,\n        item,\n        initialOffset,\n        currentOffset,\n\n    } = useDragLayer(monitor => ({\n        item: monitor.getItem(),\n        itemType: monitor.getItemType(),\n        initialOffset: monitor.getInitialSourceClientOffset(),\n        currentOffset: monitor.getSourceClientOffset(),\n        isDragging: monitor.isDragging(),\n    }))\n\n    const renderItem = () => {\n        switch (itemType) {\n          case ELEMENT:\n            return <img className={classes.ImageSytle} src={item.logo} alt=''/>\n          default:\n            return null\n        }\n      }\n\n    if (!isDragging || item.id) {\n        return null\n    }\n\n    return (\n        <div className={classes.DragPreview}>\n            <div \n                className={classes.ItemStyle} \n                style={getItemStyles(initialOffset, currentOffset)}\n            >\n                {renderItem()}\n            </div>\n        </div>\n    )\n}\nexport default DragPreview\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDrag } from 'react-dnd';\nimport { ELEMENT } from '../../Constants';\nimport classes from './ResizeHandle.module.css';\n\nconst ResizeHandle = props => {\n\n    const [, resize ] = useDrag({\n        item: { type: ELEMENT, ...props.item, resizing: props.orientation, moving: false },\n    })\n\n    const innerStyle = props.orientation === 'left' ? {left: 0} : {right: 0};\n\n    return (\n        <div\n            className={classes.ResizeHandle}\n            style={{...innerStyle, backgroundColor: props.bgColor}}\n            ref={resize}\n        />\n    )\n}\n\nResizeHandle.defaultProps = {\n    item: {},\n}\n\nResizeHandle.propTypes = {\n    item: PropTypes.object.isRequired,\n    orientation: PropTypes.string\n}\n\nexport default ResizeHandle;","import React, { useState } from 'react';\nimport { useDrag } from 'react-dnd';\nimport PropTypes from 'prop-types';\n\nimport { ELEMENT } from '../../Constants';\nimport { rgbaFromArray } from '../../Helpers/Functions';\nimport DefaultDetailedElement from '../DefaultElement/DefaultDetailedElement/DefaultDetailedElement';\nimport DragPreview from '../DragPreview/DragPreview';\nimport ResizeHandle from '../ResizeHandle/ResizeHandle';\nimport classes from './ElementWrapper.module.css';\n\n// Static style section \n\nconst styles = {\n\n    removeButtonLines: {\n        shared: {\n            position: 'absolute',\n            right: '14px',\n            top: '7.5px',\n            height: '15px',\n            width: '2px',\n            backgroundColor: '#E76E54',\n          },\n          first : {\n            transform: 'rotate(45deg)',\n          },\n          second : {\n            transform: 'rotate(-45deg)',\n          }\n    },\n}\n\n\n\n// Main component\nconst ElementWrapper = props => {\n\n    const [{isDragging}, drag ] = useDrag({\n        item: { type: ELEMENT, ...props.item, resizing: null, moving: props.innerElement },\n        collect: monitor => ({\n            isDragging: !!monitor.isDragging(),\n        }),\n    });\n\n    const hoverStyle = {\n        border: `2px solid ${rgbaFromArray( props.bgColor )}`,\n        borderStyle: 'solid none solid none'\n    }\n\n    const [hoverStyleActive, setHoverStyleActive] = useState( null );\n\n    // if (isDragging && props.innerElement || isResizing) {\n    //     return <div ref={drag} />\n    // }\n\n    return (\n        <>\n            <div \n                onClick={props.onClick}\n                ref={drag}\n                className={classes.ElementWrapper}\n                style={{\n                    cursor: props.move ? 'move' : 'grab',\n                }}\n            >\n                <props.customElementType {...props} />\n\n                {\n                    props.showOccurences && props.occurences > 0\n                        ?   <div className={classes.ElementOccurences}>{props.occurences}</div>\n                        :   null\n                }\n                {\n                    props.overlay\n                        ?   <div\n                                className={classes.Overlay}\n                                style={hoverStyleActive}\n                                onMouseOver={() => setHoverStyleActive( hoverStyle )}\n                                onMouseLeave={() => setHoverStyleActive( null )}\n                            >\n                                <div \n                                    className={classes.RemoveButton} \n                                    onClick={props.remove}\n                                >\n                                    <div style={{...styles.removeButtonLines.shared, ...styles.removeButtonLines.first}}/>\n                                    <div style={{...styles.removeButtonLines.shared, ...styles.removeButtonLines.second}}/>\n                                </div>\n                                <ResizeHandle \n                                    orientation='left'\n                                    item={props.item}\n                                    bgColor={rgbaFromArray( props.bgColor )}\n                                />\n                                <ResizeHandle \n                                    orientation='right'\n                                    item={props.item}\n                                    bgColor={rgbaFromArray( props.bgColor )}\n                                />\n                            </div>\n                        :   null\n                }\n            </div>\n            {\n                !props.innerElement\n                    ?   <DragPreview />\n                    :   null\n            }\n            \n        </>\n    )\n}\n\n\n\nElementWrapper.defaultProps = {\n    item: {\n        id: null,\n        logo: '',\n        description: '',\n        startDate: '',\n        endDate: '',\n        elementType: 'range',\n    },\n    overlay: false,\n    move: false,\n    customElementType: DefaultDetailedElement,\n    occurences: 0,\n    showOccurences: false\n}\n\nElementWrapper.propTypes = {\n    item: PropTypes.object.isRequired,\n    width: PropTypes.number,\n    overlay: PropTypes.bool,\n    move: PropTypes.bool,\n    onClick: PropTypes.func,\n    remove: PropTypes.func,\n    customElementType: PropTypes.elementType,\n    bgColor: PropTypes.array,\n    occurences: PropTypes.number,\n    showOccurences: PropTypes.bool\n}\n\nexport default ElementWrapper;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ElementWrapper from '../ElementWrapper/ElementWrapper';\nimport { dayDiff, getDaysInMonth } from '../../Helpers/Functions';\nimport { COLORS } from '../../Constants';\nimport classes from './ItemsGrid.module.css';\n\nconst ItemsGrid = props => {\n\n    const [gridItems, setGridItems] = useState();\n\n    // const days = () =>{\n    //     let nbreDays = 0;\n    //     props.monthList.forEach( month => nbreDays += getDaysInMonth( month.month, month.year ));\n    //     return nbreDays;\n    // }\n    \n    const getGridTemplateColumns = () => {\n        const columnTemplate = [];\n        props.monthList.forEach( month => {\n            const days = getDaysInMonth( month.month, month.year );\n            const width = props.width / days;\n\n            for ( let i = 0; i < days ; i++ )\n            {\n                columnTemplate.push(`${width}px`);\n            }\n        });\n\n        return columnTemplate\n    }\n\n    const style = {\n        width: props.width * props.monthList.length,\n        gridTemplateColumns: getGridTemplateColumns().join(' '),\n    }\n\n\n    useEffect(() => {\n        const gridColors = [];\n\n        const newGridItems = props.items.map(( item, index) => {\n            // Exctract month and year from the project start date\n            const monthStart = props.startDate.getMonth();\n            const yearStart = props.startDate.getFullYear();\n    \n            // The gris start at day 1 for each month in the project\n            // In order to place the item correctly inside the common grid (shared between all the months)\n            // I have to calculate the exact position by calculate the number of days between the item start date\n            // and the first day of the starting month of the project\n    \n            const position = Math.round(dayDiff( item.startDate, new Date( yearStart, monthStart, 1 ))) + 1;\n\n            // Select color for the item. If itemId has already a color assigned pick it else create one\n            \n            let color = null;\n\n            // If the colorIndex is provided use it\n            if ( props.colorIndex )\n            {\n                color = COLORS[props.colorIndex]\n            }\n            else    // Else we define it by parsing the array        \n            {\n                let searchItemId = gridColors.find(i => i.itemId === item.itemId);\n\n                if ( searchItemId )\n                {\n                    color = searchItemId.color\n                }\n                else\n                {\n                    color = COLORS[gridColors.length]\n\n                    gridColors.push({\n                        itemId: item.itemId,\n                        color: color\n                    });\n                }\n            }\n    \n            return (\n                <div \n                    style={{\n                        gridColumn: `${position} / ${position + dayDiff( item.endDate, item.startDate ) + 1}`\n                    }} \n                    key={`item_${item.id}_${index}`}\n                >\n                    <ElementWrapper\n                        item={item} \n                        overlay\n                        move\n                        bgColor={color}\n                        elementClassName={props.elementClassName} \n                        innerElement\n                        customElementType={props.customInnerElementType}\n                        style={{marginLeft: 0}}\n                        onClick={() => console.log(item)}\n                        remove={() => props.onRemove( item.id )}\n                    />\n                </div>\n            )\n        });\n\n        setGridItems( newGridItems );\n    }, [props.items, props.startDate]);\n\n    return (\n        <div\n            className={classes.ItemsGrid}\n            style={{...style, ...props.style}}\n        >\n            {gridItems}\n        </div>\n    );\n}\n\nItemsGrid.defaultProps = {\n    items: [],\n    monthList: [],\n}\n\nItemsGrid.propTypes = {\n    items: PropTypes.array,\n    width: PropTypes.number,\n    onRemove: PropTypes.func,\n    elementClassName: PropTypes.string,\n    customInnerElementType: PropTypes.elementType,\n    style: PropTypes.object,\n    monthList: PropTypes.array,\n    startDate: PropTypes.objectOf(Date),\n    colorIndex: PropTypes.number\n}\n\nexport default ItemsGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { rgbaFromArray } from '../../../Helpers/Functions';\nimport classes from './DefaultBasicElement.module.css';\n\nconst alpha = 0.7;\n\nconst DefaultBasicElement = props => {\n\n    return (\n        <div \n            className={[classes.DefaultBasicElement, props.className].join(' ')}\n            style={{\n                ...props.style, \n                background: rgbaFromArray( props.bgColor, alpha )}}\n        >   \n        </div>\n    )\n}\n\nDefaultBasicElement.defaultProps = {\n\n}\n\nDefaultBasicElement.propTypes = {\n    style: PropTypes.object,\n    className: PropTypes.string,\n    bgColor: PropTypes.array\n}\n\nexport default DefaultBasicElement;","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DefaultBasicElement from '../DefaultElement/DefaultBasicElement/DefaultBasicElement';\nimport DefaultDetailedElement from '../DefaultElement/DefaultDetailedElement/DefaultDetailedElement';\nimport ItemsGrid from '../ItemsGrid/ItemsGrid';\nimport classes from './GroupItemsGrid.module.css';\n\nconst GroupItemsGrid = props => {\n\n    const [groupedItems, setGroupItems] = useState( {} );\n    const [elementHovered, setElementHovered] = useState( null );\n\n    useEffect(() => {\n        const groupedItemsTmp = {};\n        props.items.forEach( item => {\n            // Set a string ID to the group to avoid key sorting\n            const groupId = `group_${item.itemId}`\n\n            if ( !groupedItemsTmp[groupId] ) \n            {\n                groupedItemsTmp[groupId] = []\n            }\n\n            groupedItemsTmp[groupId].push( item );\n        })\n\n        setGroupItems( groupedItemsTmp );\n\n    }, [props.items, props.startDate]);\n\n    const hoverStyle = {background: 'rgba(250, 250, 250, 1'} \n\n    const grouped = (\n        Object.keys(groupedItems).map(( items, index ) => {\n            const borderStyle = \n                index < Object.keys(groupedItems).length - 1\n                    ?   {borderBottom:  '1px solid #f1f1f1'}\n                    :   null\n\n            return (\n                <React.Fragment key={`groups_items_${items}${index}`}>\n                    <div \n                        className={classes.Groups}\n                        style={elementHovered === index ? {...hoverStyle, ...borderStyle} : borderStyle} \n                        onMouseOver={() => setElementHovered( index )}\n                        onMouseLeave={() => setElementHovered( null )}\n                    >\n                        <DefaultDetailedElement \n                            item={groupedItems[items][0]} \n                            className={classes.CustomItem}\n                            style={{background: 'transparent'}}\n                        />\n                    </div>\n                    <div \n                        className={classes.Items}\n                        style={elementHovered === index ? hoverStyle : null}\n                        onMouseOver={() => setElementHovered( index )}\n                        onMouseLeave={() => setElementHovered( null )}\n                    >\n                        <ItemsGrid \n                            {...props}\n                            width={props.width - props.leftWidth} /* Set the width of the itemGrid to fit inside the grid defined*/\n                            style={{\n                                ...props.style,\n                                ...borderStyle,\n                                marginTop: 0\n                            }}\n                            items={groupedItems[items]}\n                            colorIndex={index}\n                        />\n                    </div>\n                </React.Fragment>\n            )\n        })\n    )\n\n    return (\n        <div \n            className={classes.GroupViewGrid} \n            style={{\n                width: `${(props.width - props.leftWidth) * props.monthList.length + props.leftWidth}px`,\n                gridTemplateColumns: `${props.leftWidth}px ${(props.width - props.leftWidth) * props.monthList.length}px`\n            }}\n        >\n            <div className={classes.SpacerLeft} />\n            <div className={classes.SpacerRight} />\n            {grouped}\n        </div>\n    )\n}\n\nGroupItemsGrid.defaultProps = {\n    items: [],\n    customElementType: DefaultBasicElement,\n    leftWidth: 220\n}\n\nGroupItemsGrid.propTypes = {\n    items: PropTypes.array,\n    customElementType: PropTypes.elementType,\n    startDate: PropTypes.objectOf(Date),\n    leftWidth: PropTypes.number\n}\n\nexport default GroupItemsGrid;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport DaysGrid from '../DaysGrid/DaysGrid';\nimport ItemsGrid from '../ItemsGrid/ItemsGrid';\nimport GroupItemsGrid from '../GroupItemsGrid/GroupItemsGrid';\n\nconst leftWidth = 220;\n\nconst LayoutGrid = props => {\n\n    const daysGridElements = ( width, offset ) => (\n        props.monthList.map(( month, index ) => (\n            <DaysGrid \n                key={`daysGrid_${month.month}_${month.year}`}\n                onDrop={props.onDrop}\n                month={month}\n                index={index}\n                scroll={props.scroll}\n                grouped={props.grouped}\n                offset={offset}\n                width={width}\n                style={{transform: `translateX(${( 100 * index ) - ( 100 * props.currentMonth )}%)`}}\n            >\n            </DaysGrid>\n        ))\n    );\n\n\n    //Inline view without groups \n    const inLineStyle = (\n        <>\n            {daysGridElements( props.width )}\n            <ItemsGrid {...props} style={{transform: `translateX(-${( props.width * props.currentMonth )}px)`}}/>\n        </>\n    )\n\n    // Groups view\n    const groupedStyle = (\n        <>\n            {daysGridElements( props.width, leftWidth )}\n            <GroupItemsGrid\n                {...props} \n                width={props.width}\n                leftWidth={leftWidth}\n                style={{transform: `translateX(-${(( props.width - leftWidth ) * props.currentMonth )}px)`}}\n            />\n        </>\n    )\n\n    return (\n        <>\n        {\n            !props.grouped\n                ?   inLineStyle\n                :   groupedStyle\n        }\n        </>\n    )\n\n}\n\nLayoutGrid.defaultProps = {\n    monthList: [],\n    currentMonth: 0,\n    scroll: false\n}\n\nLayoutGrid.propTypes = {\n    grouped: PropTypes.bool,\n    monthList: PropTypes.array,\n    currentMonth: PropTypes.number,\n    onDrop: PropTypes.func,\n    width: PropTypes.number,\n    scroll: PropTypes.bool\n}\n\nexport default LayoutGrid;","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n\nimport * as helpers from './Helpers/Functions';\nimport MonthSelector from './Components/MonthSelector/MonthSelector';\nimport LayoutGrid from './Components/LayoutGrid/LayoutGrid';\n\nimport classes from './Timeline.module.css';\n\n\n// Component\nconst Timeline = props => {\n\n    const baseIndex = 100000000;\n    const timelineRef = useRef();\n    const borderSize = 1;\n\n    const [items, setItems] = useState( [] );\n    const [timelineWidth, setTimelineWidth] = useState( 0 );\n    const [monthList, setMonthList] = useState( [] );\n    const [currentMonth, setCurrentMonth] = useState( 0 );\n\n    // Get the higher id and increase\n    const getNextId = () => {\n        return Math.max.apply(Math, items.map(item => { return item.id; })) + 1\n    }\n\n    // Loop inside props.items to assign an ID if missing\n\n    useEffect (() => {\n        const verifiedItems = [];\n\n        props.items.forEach(( item, index ) => {\n            const tmpItem = {\n                ...item,\n                startDate: item.startDate ? new Date(item.startDate) : null,\n                endDate: item.endDate ? new Date(item.endDate) : null\n            }\n\n            if ( item.id ){\n                verifiedItems.push(tmpItem);\n            }\n            else{\n                verifiedItems.push({\n                    ...tmpItem,\n                    id: baseIndex + index\n                })\n            }\n        });\n\n        verifiedItems.sort((a, b) => {\n            a = a.startDate;\n            b = b.startDate;\n            return a<b ? -1 : a>b ? 1 : 0;\n        });\n\n        setItems( verifiedItems );\n\n    }, [props.items]);\n\n    // Update boxes size on window resized\n    useEffect(() => {\n\n        const tmpMonths = [];\n        let startDate = new Date( props.options.startDate );\n        const endDate = new Date( props.options.endDate );\n\n        const nbreMonth = helpers.monthDiff( startDate, endDate );\n\n        for (let i = 0; i < nbreMonth; i++){\n            tmpMonths.push({\n                    month: startDate.getMonth() + i + 1 ,\n                    year: startDate.getFullYear()\n                })\n        }\n        setMonthList( tmpMonths );\n        updateScreenSizeHandler();\n\n        window.addEventListener( 'resize', updateScreenSizeHandler );\n        return () => window.removeEventListener( 'resize', updateScreenSizeHandler );\n    }, [props.options.startDate, props.options.endDate]);\n\n\n    const updateScreenSizeHandler = () => {\n        // Get the timeline element size \n        const timelineElement = timelineRef.current.getBoundingClientRect();\n\n        // Update the state with the width of the timneline width\n        setTimelineWidth( timelineElement.width - ( borderSize * 2 ));\n\n    }\n\n    const onDropHandler = ( item, propagate ) => {\n\n        // Parsing data from dropped component\n        //const item = JSON.parse(event.dataTransfer.getData(\"text\"));\n        const newItems = [...items];\n        let existingId = -1;\n        let tmpItem = {\n            ...item,\n            id: item.id ? item.id : getNextId(), // Check if the item has an ID and if not assign one\n        }\n\n        //Check if the item is updated or created\n        if ( item.id )\n        {\n            existingId = newItems.findIndex( i => i.id === item.id );\n        }\n\n        // Add the new item to the item array only if it is not already present\n        if( existingId === -1 )\n        {\n            newItems.push( tmpItem );\n            if ( props.options.callBacks.onAdd && propagate ) props.options.callBacks.onAdd({item: {...tmpItem}, items: [...newItems]});\n        }\n        else //Update item\n        {\n            newItems[existingId] = tmpItem;\n            if ( props.options.callBacks.onUpdate && propagate ) props.options.callBacks.onUpdate({item: {...tmpItem}, items: [...newItems]});\n        }\n\n        // Update state with the updated items array\n        setItems( newItems );\n\n\n    }\n\n    const onRemoveItemHandler = itemID => {\n        const newItems = [...items];\n        let item = null;\n\n        const found = newItems.findIndex(i => i.id === itemID );\n\n        // Remove the item at the 'index' position if founded\n        if ( found !== -1 )\n        {\n            item = newItems[found];\n            newItems.splice( found, 1 );\n            // Update state with the new array items\n            setItems( newItems );\n        }\n        else \n        {\n            console.log(`ID : ${itemID} not found`);\n        }\n\n        if ( props.options.callBacks.onRemove ) props.options.callBacks.onRemove({item: {...item}, items: [...newItems]});\n    }\n\n    // Props list to pass to the Layout component\n\n    const propagatedProps = {\n        items: items,\n        width: timelineWidth,\n        monthList: monthList,\n        currentMonth: currentMonth,\n        onRemove: onRemoveItemHandler,\n        onDrop: onDropHandler,\n        grouped: props.grouped,\n        scroll: props.scroll,\n        customInnerElementType: props.customInnerElementType,\n        elementClassName: props.elementClassName,\n        startDate: new Date( props.options.startDate ),\n    }\n\n    return (\n        <React.Fragment>\n        <div\n            className={`${props.className}`}\n            style={{\n                border: `${borderSize}px solid #ccc`, \n                overflowX: props.scroll ? 'scroll' : 'hidden',\n                ...props.style\n            }}\n            ref={timelineRef}\n        >\n            \n            <LayoutGrid {...propagatedProps} />\n            \n        </div>\n        \n        {\n            !props.scroll\n                ?   <MonthSelector \n                        monthList={monthList}\n                        currentMonth={currentMonth}\n                        previousMonthHandler={() => setCurrentMonth( currentMonth - 1 <= 0 ? 0 : currentMonth - 1 )}\n                        nextMonthHandler={() => setCurrentMonth( currentMonth + 1 >= monthList.length - 1 ? monthList.length - 1 : currentMonth + 1 )}\n                    />\n                :   null\n        }\n\n\n        </React.Fragment>\n    )\n}\n\n\nTimeline.defaultProps = {\n    items: [],\n    options: {\n        callBacks: {\n            onAdd: null,\n            onRemove: null,\n            onUpdate: null\n        },\n        startDate: new Date().toISOString(),\n        endDate: new Date().setMonth( new Date().getMonth() + 1)\n    },\n    scroll: false,\n    grouped: false,\n    className: classes.TimelineDefault\n};\n\nTimeline.propTypes = {\n    className: PropTypes.string,\n    style: PropTypes.object,\n    onDragClass: PropTypes.string,\n    elementClassName: PropTypes.string,\n    items: PropTypes.array,\n    customInnerElementType: PropTypes.elementType,\n    options: PropTypes.shape({\n        callBacks: PropTypes.shape({\n            onAdd: PropTypes.func,\n            onRemove: PropTypes.func,\n            onUpdate: PropTypes.func\n        }),\n        startDate: PropTypes.string.isRequired,\n        endDate: PropTypes.string.isRequired\n    }),\n    scroll: PropTypes.bool,\n    grouped: PropTypes.bool,\n}\n\nexport default Timeline;","import React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\n//import HTML5Backend from 'react-dnd-html5-backend';\nimport MouseBackEnd from 'react-dnd-mouse-backend'\n\nimport classes from './App.module.css';\n\nimport Timeline from './Timeline/Timeline';\nimport ElementWrapper from './Timeline/Components/ElementWrapper/ElementWrapper';\n\n//import logo\nimport logo1 from './assets/images/logo1.png';\nimport logo2 from './assets/images/logo2.png';\nimport logo3 from './assets/images/logo3.png';\nimport logo4 from './assets/images/logo4.png';\nimport logo5 from './assets/images/logo5.png';\nimport logo6 from './assets/images/logo6.png';\nimport logo7 from './assets/images/logo7.png';\n\n\n//Internal Component \n\nconst Option = props => (\n    <div className={classes.Option}>\n        <span style={{marginRight: '10px', fontSize: '14px'}}>{props.children}</span>\n        <label className={classes.Switch}>\n            <input type=\"checkbox\" checked={props.checked} onChange={props.onChange}/>\n            <span className={`${classes.Slider} ${classes.Round}`}></span>\n        </label>\n    </div>\n)\n\n\nconst App = () =>  {\n\n    const [scrollEnabled, setScrollEnabled] = useState( true );\n    const [groupedEnabled, setGroupedEnabled] = useState( true );\n    const [showOccurences, setShowOccurences] = useState( true );\n\n    const items = [\n        {\n            itemId: 1,\n            logo: logo1,\n            description: 'Caro Confort',\n            elementType: 'range',\n        },\n        {\n            itemId: 2,\n            logo: logo2,\n            description: 'AB Menuiserie',\n            elementType: 'range',\n        },\n        {\n            itemId: 3,\n            logo: logo3,\n            description: 'Fournier',\n            elementType: 'range',\n        },\n        {\n            itemId: 4,\n            logo: logo4,\n            description: 'Krëfel',\n            elementType: 'range',\n        },\n        {\n            itemId: 5,\n            logo: logo5,\n            description: 'MG Terrassements',\n            elementType: 'range',\n        },\n        {\n            itemId: 6,\n            logo: logo6,\n            description: 'Roosens Bétons',\n            elementType: 'range',\n        },\n        {\n            itemId: 7,\n            logo: logo7,\n            description: 'Sopi Façades',\n            elementType: 'range',\n        },\n    ];\n\n    const [fixedItems, setFixedItems] = useState([\n        {\n            ...items[0],\n            startDate: '2019-10-02',\n            endDate: '2019-10-08',\n            elementType: 'range',\n        },\n        {\n            ...items[5],\n            startDate: '2019-10-08',\n            endDate: '2019-10-12',\n            elementType: 'range',\n        },\n        {\n            ...items[3],\n            startDate: '2019-10-15',\n            endDate: '2019-10-17',\n            elementType: 'range',\n        },\n        {\n            ...items[1],\n            startDate: '2019-10-25',\n            endDate: '2019-10-29',\n            elementType: 'range',\n        },\n        {\n            ...items[2],\n            startDate: '2019-11-15',\n            endDate: '2019-11-18',\n            elementType: 'range',\n        },\n        {\n            ...items[6],\n            startDate: '2019-11-14',\n            endDate: '2019-11-21',\n            elementType: 'range',\n        },\n        {\n            ...items[1],\n            startDate: '2019-11-20',\n            endDate: '2019-11-29',\n            elementType: 'range',\n        },\n        {\n            ...items[0],\n            startDate: '2019-12-07',\n            endDate: '2019-12-17',\n            elementType: 'range',\n        },\n        {\n            ...items[2],\n            startDate: '2019-12-22',\n            endDate: '2019-12-27',\n            elementType: 'range',\n        }\n    ]);\n\n    const [occurences, setOccurences] = useState({});\n\n    useEffect(() => {\n        if ( showOccurences )\n        {\n            let itemsOccurences = {}\n            fixedItems.forEach( item => {\n                itemsOccurences = {\n                    ...itemsOccurences,\n                    [item.itemId] : itemsOccurences[item.itemId] ? itemsOccurences[item.itemId]  + 1 : 1\n                }\n            });\n\n            setOccurences( itemsOccurences );\n        }\n    }, [fixedItems, showOccurences]);\n\n    const startDate = '2019-10-01';\n    const endDate = '2019-12-31';\n\n    const addHandler = ( {item, items} ) => {\n        console.log( `Added : ${item}` );\n        setFixedItems( items );\n    }\n\n    const removeHandler = ( {item, items} ) => {\n        console.log( `Removed : ${item}` );\n        setFixedItems( items );\n    }\n\n    const updateHandler = ( {item, items} ) => {\n        console.log( `Updated : ${item}` );\n        setFixedItems( items );\n    }\n\n    const options = {\n        callBacks : {\n            onAdd : addHandler,\n            onRemove: removeHandler,\n            onUpdate: updateHandler\n        },\n        startDate : startDate, \n        endDate: endDate\n    }\n\n\n    return (\n        <DndProvider backend={MouseBackEnd}>\n            <div className={classes.Content}>\n                <p>Options</p>\n                <div className={classes.Options}>\n                    <Option checked={scrollEnabled} onChange={() => setScrollEnabled( !scrollEnabled )}>\n                        Enable Scroll\n                    </Option>\n                    <Option checked={groupedEnabled} onChange={() => setGroupedEnabled( !groupedEnabled )}>\n                        Grouped View\n                    </Option>\n                    <Option checked={showOccurences} onChange={() => setShowOccurences( !showOccurences )}>\n                        Show Occurences\n                    </Option>\n                </div>\n                <p>Droppable Items</p>\n                <div className={classes.Elements}>\n                    {\n                        items.map(( item, index ) => (\n                            <div style={{marginRight: '10px'}} key={`main_item_${index}`}>\n                                <ElementWrapper \n                                    item={item}\n                                    shadowed\n                                    showOccurences={showOccurences}\n                                    occurences={occurences[item.itemId]}\n                                />\n                            </div>\n                        ))\n                    }\n                </div>\n                <div className={classes.Timeline}>\n                    <Timeline items={fixedItems} options={options} scroll={scrollEnabled} grouped={groupedEnabled}/>\n                </div>\n\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}