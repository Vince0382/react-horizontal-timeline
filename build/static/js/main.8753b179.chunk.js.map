{"version":3,"sources":["components/Timeline/Timeline.module.css","components/Element/Element.module.css","App.module.css","components/Element/Element.js","components/Timeline/Timeline.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Element","props","className","draggable","onDragStart","event","item","target","style","cursor","dataTransfer","setData","JSON","stringify","dragStartHandler","onDragEnd","classes","ItemFlex","src","logo","alt","Description","description","defaultProps","ItemDefaultClass","id","startDate","endDate","type","OuterWrapper","RemoveButton","onClick","remove","children","Timeline","counter","useState","dragClass","setDragClass","items","setItems","useEffect","verifiedItems","forEach","index","push","console","log","onDragOver","preventDefault","onDragEnter","onDragClass","onDragLeave","onDrop","parse","getData","newItems","duplicateId","find","i","Math","max","apply","map","key","itemIndex","newArray","splice","removeItemHandler","customElementType","itemClass","TimelineDefaultClass","DragDefaultClass","App","Elements","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8753b179.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TimelineDefaultClass\":\"Timeline_TimelineDefaultClass__20oGi\",\"DragDefaultClass\":\"Timeline_DragDefaultClass__ElRkC\",\"OuterWrapper\":\"Timeline_OuterWrapper__3UBX1\",\"RemoveButton\":\"Timeline_RemoveButton__2LQYr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ItemDefaultClass\":\"Element_ItemDefaultClass__Mi4F1\",\"ItemFlex\":\"Element_ItemFlex__Tm9zd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Elements\":\"App_Elements__fmpcd\",\"Timeline\":\"App_Timeline__3mVrs\"};","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Element.module.css';\n\nconst Element = props => {\n\n    const dragStartHandler = ( event, item ) => {\n        event.target.style.cursor = 'grabbing';\n        event.dataTransfer.setData('text', JSON.stringify(item));\n    };\n\n    return (\n        <div \n            className={props.className}\n            draggable=\"true\"\n            onDragStart={( event ) => dragStartHandler( event, props.item )}\n            onDragEnd={( event ) => event.target.style.cursor = 'grab'}\n        >\n            <div className={classes.ItemFlex}>\n                <img src={props.item.logo} alt='Logo' />\n                <div className={classes.Description}>\n                    {\n                        props.item.description\n                    }\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nElement.defaultProps = {\n    className : classes.ItemDefaultClass,\n    item: {\n        id: null,\n        logo: '',\n        description: '',\n        startDate: '',\n        endDate: '',\n        type: 'range',\n    } \n}\n\nElement.propTypes = {\n    className: PropTypes.string,\n    itemClass: PropTypes.string,\n    item: PropTypes.object.isRequired\n}\n\nexport default Element;","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Element from '../Element/Element';\n\nimport classes from './Timeline.module.css';\n\n// Wrapping div for the element to add the remove button\n\nconst OuterWrapper = props => (\n    <div className={classes.OuterWrapper}>\n        <div className={classes.RemoveButton} onClick={props.remove}>X</div>\n        {props.children}\n    </div>\n)\n\nconst Timeline = props => {\n\n    const baseIndex = 100000000;\n    let counter = 0;\n\n    const [dragClass, setDragClass] = useState( null );\n    const [items, setItems] = useState( [] );\n\n\n    // Get the higher id and increase\n    const getNextId = () => {\n        return Math.max.apply(Math, items.map(item => { return item.id; })) + 1\n    }\n\n    // Loop inside props.items to assign an ID if missing\n\n    useEffect (() => {\n        const verifiedItems = [];\n\n        props.items.forEach(( item, index ) => {\n            if ( item.id ){\n                verifiedItems.push(item);\n            }\n            else{\n                verifiedItems.push({\n                    ...item,\n                    id: baseIndex + index\n                })\n            }\n        });\n\n        setItems( verifiedItems );\n\n    }, [props.items])\n\n    const onDragEnterHandler = event => {\n        event.preventDefault();\n\n        counter++;\n        setDragClass( props.onDragClass )\n    }\n\n    const onDragLeaveHandler = event => {\n        event.preventDefault();\n\n        counter--;\n        if (counter === 0) { \n            setDragClass( '' );\n        }\n    }\n\n    console.log(counter);\n\n    const onDropHandler = ( event ) => {\n        event.preventDefault();\n\n        // Reset the counter\n        counter = 0;\n\n        // Parsing data from dropped component\n        const item = JSON.parse(event.dataTransfer.getData(\"text\"));\n        const newItems = items;\n        let duplicateId = false;\n\n        // Check if the item has an ID and if not add one\n        if ( !item.id )\n        {\n            item.id = getNextId();\n        }\n        else\n        {\n            //Check if the item is already present in the list to avoid duplicate entry\n            duplicateId = newItems.find( i => i.id === item.id );\n        }\n\n        // Add the new item to the item array only if it is not already present\n        if( !duplicateId )\n        {\n            newItems.push(item);\n        }\n\n        // Update state with the new array items\n        setItems( newItems );\n\n        // Reset the class to remove the specific cursor\n        setDragClass( '' )\n    }\n\n    const removeItemHandler = itemIndex => { \n        const newArray = [...items];\n\n        // Remove the item at the 'index' position\n        newArray.splice( itemIndex, 1 );\n\n        // Update state with the new array items\n        setItems( newArray );\n    }\n\n    return (\n\n        <div\n            className={`${props.className} ${dragClass}`}\n            onDragOver={( event ) => {event.preventDefault()}}\n            onDragEnter={onDragEnterHandler}\n            onDragLeave={onDragLeaveHandler}\n            onDrop={onDropHandler}\n            >\n\n            {\n                items.map(( item, index ) => {\n                    console.log( \"rendering\", items);\n                    return (\n                        <OuterWrapper key={`item_${item.id}_${index}`} remove={() => removeItemHandler( index )}>\n                            <props.customElementType className={props.itemClass} item={item} />\n                        </OuterWrapper>\n                    )\n                })\n            }\n\n        </div>\n    )\n}\n\n\nTimeline.defaultProps = {\n  className: classes.TimelineDefaultClass,\n  onDragClass: classes.DragDefaultClass,\n  items: [],\n  customElementType: Element\n};\n\nTimeline.propTypes = {\n  className: PropTypes.string,\n  onDragClass: PropTypes.string,\n  itemClass: PropTypes.string,\n  items: PropTypes.array,\n  customElementType: PropTypes.elementType\n}\n\n\n\nexport default Timeline;","import React from 'react';\nimport classes from './App.module.css';\n\nimport Timeline from './components/Timeline/Timeline';\nimport Element from './components/Element/Element';\n\nconst App = () =>  {\n\n    const items = [\n        {\n            id: 24,\n            logo: '',\n            description: 'Test element 1',\n            startDate: '',\n            endDate: '',\n            type: 'range',\n        },\n        {\n            logo: '',\n            description: 'Test element 2',\n            startDate: '',\n            endDate: '',\n            type: 'range',\n        },\n        {\n            logo: '',\n            description: 'Test element 3',\n            startDate: '',\n            endDate: '',\n            type: 'range',\n        },\n        {\n            logo: '',\n            description: 'Test element 4',\n            startDate: '',\n            endDate: '',\n            type: 'range',\n        }\n    ]\n\n//     const [test, setTest] = React.useState([1, 2, 3]);\n\n//     const remove = index => {\n//         const tmp = test ;\n//         tmp.splice( index, 1);\n//         setTest(tmp);\n//         console.log('clicked');\n//     }\n\n\n// console.log(test);\n    return (\n        <div>\n            <div className={classes.Elements}>\n                {\n                    items.map(( item, index ) => <Element key={`main_item_${index}`} item={item} />)\n                }\n            </div>\n            <div className={classes.Timeline}>\n                <Timeline items={items}/>\n            </div>\n            {/* <div>\n                {\n                    test.map(( item, index) => <div style={{width: '100px', heigth: '40px', padding: '20px', background: 'navy', color: 'white'}} onClick={() => remove( index )} key={item}>{item}</div>)\n                }\n            </div> */}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}